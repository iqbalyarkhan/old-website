{"componentChunkName":"component---src-templates-post-js","path":"/c-standard-input","result":{"data":{"markdownRemark":{"html":"<p>In this post I'll talk about some of the common methods to extract input from the user along with best practices and examples. There are plenty of resources on the web that talk about common techniques, this blog chronicles my journey (mostly headaches) while getting user input for specific scenarios.</p>\n<h3 id=\"streams\"><a href=\"#streams\" aria-label=\"streams permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Streams</h3>\n<p>One of the main operations one can do while programming is interacting with the data. This could be importing data from various sources and using it in your program or displaying some data to the user. To do so, in C++, we use the <strong>streams library</strong>.</p>\n<p>A <strong>stream</strong> can be considered a form of communication between the program and the user. There are various different types of streams that are discussed below</p>\n<h4 id=\"cout-and-stream-insertion-operator\"><a href=\"#cout-and-stream-insertion-operator\" aria-label=\"cout and stream insertion operator permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>cout and stream insertion operator</h4>\n<p><strong>cout</strong> or <strong>c</strong>haracter <strong>out</strong>put is used to display data from program to the console. cout is used in conjuction with the stream insertion operator: <strong>&#x3C;&#x3C;</strong> like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></code></pre></div>\n<p>The above line first pushes <code class=\"language-cpptext\">Hello</code> to the character out (cout) stream and then pushes the newline, <code class=\"language-cpptext\">endl</code> , to cout.</p>\n<p>cout can be used to <strong>chain</strong> data as we push to the console like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">  string name <span class=\"token operator\">=</span> <span class=\"token string\">\"You\"</span><span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello \"</span> <span class=\"token operator\">&lt;&lt;</span> name <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//Prints:</span>\n  Hello You</code></pre></div>\n<h4 id=\"cin-and-stream-extraction-operator\"><a href=\"#cin-and-stream-extraction-operator\" aria-label=\"cin and stream extraction operator permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>cin and stream extraction operator</h4>\n<p><strong>cin</strong> or <strong>c</strong>haracter <strong>in</strong>put operator reads values from the user or extracts them.</p>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">  <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter your favorite number: \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  cin <span class=\"token operator\">>></span> num<span class=\"token punctuation\">;</span> <span class=\"token comment\">//cin and stream extraction</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Your favorite number is: \"</span> <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Like cout, cin can be chained as well:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">  string name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter your name and age: \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  cin <span class=\"token operator\">>></span> name <span class=\"token operator\">>></span> age<span class=\"token punctuation\">;</span> <span class=\"token comment\">//Cplus, 20</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" is \"</span> <span class=\"token operator\">&lt;&lt;</span> age <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" years old.\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//Prints: Cplus is 20 years old.</span></code></pre></div>\n<h4 id=\"streams-and-error-handling\"><a href=\"#streams-and-error-handling\" aria-label=\"streams and error handling permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Streams and error handling</h4>\n<p>If you're reading input from user, you'd have to make sure that the data provided by the user is correct. If not, our stream would enter a fail state which have to be handled manually. For example, consider this code where we're asking user for an integer:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> myInt<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter int: \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> myInt<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Failed to read, cleaning up cin\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        cin<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cin<span class=\"token punctuation\">.</span><span class=\"token function\">ignore</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>numeric_limits<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>streamsize<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"No issues, you entered: \"</span> <span class=\"token operator\">&lt;&lt;</span> myInt <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> newInt<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter newInt: \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> newInt<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"New int is: \"</span> <span class=\"token operator\">&lt;&lt;</span> newInt <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>On line 10, if we enter a string instead of an int, we'd enter the check on line 11:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber 10\" class=\"language-cppcpp line-numbers\"><code class=\"language-cppcpp\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Failed to read, cleaning up cin\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        cin<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cin<span class=\"token punctuation\">.</span><span class=\"token function\">ignore</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>numeric_limits<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>streamsize<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In this block we're doing 2 things: one, we're clearing the fail state by calling <code class=\"language-cpptext\">cin.clear()</code>. This call clears the error flag on cin. Through this, we've manually reset the error flag so that future <code class=\"language-cpptext\">cin</code> operations are successful. But before we can get further input via <code class=\"language-cpptext\">cin</code>, we also need to extract the input and discard it that caused the error to occur in the first place. </p>\n<p>This is done via line 14:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber 13\" class=\"language-cppcpp line-numbers\"><code class=\"language-cppcpp\">        cin<span class=\"token punctuation\">.</span><span class=\"token function\">ignore</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>numeric_limits<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>streamsize<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Here, we're asking <code class=\"language-cpptext\">cin</code> to ignore the entire stream that was entered by the user. If you had only used this:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">        cin<span class=\"token punctuation\">.</span><span class=\"token function\">ignore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>by default, <code class=\"language-cpptext\">cin</code> would've only ignored a single character. A simple <code class=\"language-cpptext\">cin.ignore()</code> would've worked fine if you were sure that the user would type a single character (say <code class=\"language-cpptext\">s</code> instead of an integer). In that case, we would've printed the error message and then waited at line 19:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber 18\" class=\"language-cppcpp line-numbers\"><code class=\"language-cppcpp\">    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter newInt: \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>for the user to enter a new integer. However, if the user had entered more than one character, say <code class=\"language-cpptext\">hola</code>, then the ignore would've ignored only the first character <code class=\"language-cpptext\">h</code> in <code class=\"language-cpptext\">hola</code> and carried over the <code class=\"language-cpptext\">ola</code> to the next <code class=\"language-cpptext\">cin</code> read. Thus, when we would've encountered the cin on line 20:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber 19\" class=\"language-cppcpp line-numbers\"><code class=\"language-cppcpp\">      cin <span class=\"token operator\">>></span> newInt<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p><code class=\"language-cpptext\">cin</code> wouldn't wait for us to type a number and would use garbage value to populate <code class=\"language-cpptext\">newInt</code>. </p>\n<p>Thankfully, by defining <code class=\"language-cpptext\">cin.ignore()</code> the way we have, we can ignore the entire stream in case the user typed out a novel instead of providing us with an integer. Therefore, if you would've entered a long string in place of an integer, you would've seen this output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-cpptext\"><code class=\"language-cpptext\">Enter int: \nhola\nFailed to readundefined cleaning up cin\nEnter newInt: </code></pre></div>\n<p>Here is another example showing what would happen if you entered wrong input:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> myInt<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> myDouble<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter an int: \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span>myInt<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Enter a double: \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> myDouble<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Int: \"</span> <span class=\"token operator\">&lt;&lt;</span> myInt <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Double: \"</span> <span class=\"token operator\">&lt;&lt;</span> myDouble <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If I entered a double for <code class=\"language-cpptext\">myInt</code>, <code class=\"language-cpptext\">cin</code> would extract the number before the period and then would assign the decimal part after the period to <code class=\"language-cpptext\">myDouble</code> without waiting for me to provide the value for <code class=\"language-cpptext\">myDouble</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-cpptext\"><code class=\"language-cpptext\">Enter an int: \n2.178\nEnter a double: \nInt: 2\nDouble: 0.178\nProgram ended with exit code: 0</code></pre></div>\n<h4 id=\"getline-a-different-approach\"><a href=\"#getline-a-different-approach\" aria-label=\"getline a different approach permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>getline(): A different approach</h4>\n<p>Another way to get input from user is to use the <strong>getline</strong> method.</p>\n<p><strong>getline()</strong> reads characters from a stream until a newline character is encountered and stores the read characters (minus the newline) in a string. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">  string input<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>getline() gets you the entire input entered by the user and then allows you to process the input however you want. We'll talk more about getline in a coming section.</p>\n<h4 id=\"reading-from-files\"><a href=\"#reading-from-files\" aria-label=\"reading from files permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reading from files</h4>\n<p>Most common method to import large quantities of data into your program is to read it from a file. To do so, we'll use the header file called <strong>f</strong>ile <strong>stream</strong>: <code class=\"language-cpptext\">&lt;fstream&gt;</code>. This header file includes <code class=\"language-cpptext\">ifstream</code> and <code class=\"language-cpptext\">ofstream</code> (input file stream and output file stream) to read from and write to files.</p>\n<p>Unlike <code class=\"language-cpptext\">cin</code> and <code class=\"language-cpptext\">cout</code> which are <strong>stream objects</strong>, <code class=\"language-cpptext\">ifstream</code> and <code class=\"language-cpptext\">ofstream</code> are types (like int, bool, string, double) which means you need to declare it to use it. Once declared and initialized, you can then use it like <code class=\"language-cpptext\">cin</code> and <code class=\"language-cpptext\">cout</code>.</p>\n<p>Here is a simple example of how to use <code class=\"language-cpptext\">fstream</code> to read from a file. Say, our file has a single double on the first line:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-cpptext\"><code class=\"language-cpptext\">23.4</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//Declaring ifstream object</span>\n  ifstream <span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inputFile.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//Using it like cin </span>\n  <span class=\"token keyword\">double</span> num<span class=\"token punctuation\">;</span>\n  input <span class=\"token operator\">>></span> num<span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Num read is: \"</span> <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//Prints: 23.4</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you're reading the input file name from the user, it is easy to see how you'd open a file for reading in that case. This something that I've done in the <a href=\"/post/binary-search#code\">Binary Search</a> post. A simpler example could be:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">  <span class=\"token comment\">//Declaring string to hold file name</span>\n  string fileName<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//Declaring ifstream object</span>\n  ifstream input<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//Extracting file name from user</span>\n  cin <span class=\"token operator\">>></span> fileName<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//Opening file with the given file name.</span>\n  input<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </code></pre></div>\n<p>One thing you should've noticed is that <code class=\"language-cpptext\">ifstream</code> is similar to <code class=\"language-cpptext\">cin</code> in that they both use stream extraction operators which makes sense since we're extracting data from a source and using it inside our program.</p>\n<p>Now that we've seen how to open a file, we must also make sure we handle any errors we encounter while opening a file for reading. To do so, we'd use the following convention:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">  ifstream <span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inputFile.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">is_open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Couldn't open input file\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></code></pre></div>\n<p>This would ensure that we'd only proceed with reading the file if it was opened successfully.</p>\n<h4 id=\"reading-till-end-of-file\"><a href=\"#reading-till-end-of-file\" aria-label=\"reading till end of file permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reading till end of file</h4>\n<p>The example I gave in the previous section is quite trivial, we're getting one value from the file and displaying it. Usually, we're unaware of the number of lines in our file. Sure, we can open the file and count, it is quite a tedious thing to do. </p>\n<p>Therefore, we need a way to read till the end of file is reached. Say for example, we've got a file that has integers on each new line. We want to read the file and populate a vector with those integers. To read such a file we can:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span>\nifstream fileStream<span class=\"token punctuation\">;</span>\nfileStream<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fileStream<span class=\"token punctuation\">.</span><span class=\"token function\">is_open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Couldn't open file: \"</span> <span class=\"token operator\">&lt;&lt;</span> fileName <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        fileStream <span class=\"token operator\">>></span> num<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fileStream<span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Line 9 would fail once we've encountered the end of file.</p>\n<p>What if, our file has two pieces o data, on the same line separated by whitespace like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-cpptext\"><code class=\"language-cpptext\">Sam 21\nBob 25\nJill 23</code></pre></div>\n<p>Simple, we'd modify the code block above by adding 2 variables to read our data:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">ifstream fileStream<span class=\"token punctuation\">;</span>\nfileStream<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fileStream<span class=\"token punctuation\">.</span><span class=\"token function\">is_open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Couldn't open file: \"</span> <span class=\"token operator\">&lt;&lt;</span> fileName <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        string name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        fileStream <span class=\"token operator\">>></span> name <span class=\"token operator\">>></span> age<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fileStream<span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"stringstreams\"><a href=\"#stringstreams\" aria-label=\"stringstreams permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stringstreams</h4>\n<p>Like console (cin,cout) and file streams, stringstreams are stream objects. Stringstreams allow us to store data in temporary string buffers.</p>\n<p>Example usage:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">  <span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;sstream></span></span>\n  <span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">.</span>\n\n  stringstream ss<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> myInt<span class=\"token punctuation\">;</span>\n  string myStr<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">double</span> myDouble<span class=\"token punctuation\">;</span>\n\n  ss <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"21 hello! 3.127\"</span><span class=\"token punctuation\">;</span>\n  ss <span class=\"token operator\">>></span> myInt <span class=\"token operator\">>></span> myStr <span class=\"token operator\">>></span> myDouble<span class=\"token punctuation\">;</span></code></pre></div>\n<p>The code above is quite self explanatory. Notice however the clean data input, and how the data is delimited by white-spaces.</p>\n<h4 id=\"our-own-getint-method\"><a href=\"#our-own-getint-method\" aria-label=\"our own getint method permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Our own GetInt() method</h4>\n<p>Say we now want to write our own <code class=\"language-cpptext\">GetInt()</code> method using the techniques we've seen so far. To do so, we'd have to:</p>\n<ul>\n<li>read input from the user</li>\n<li>make sure it is an integer</li>\n<li>make sure there are no extra characters AFTER the integer</li>\n</ul>\n<p>To accomplish this, we can use <code class=\"language-cpptext\">getline()</code> and <code class=\"language-cpptext\">stringstream</code> together:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">  string userInput<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    stringstream ss<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span>userInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ss <span class=\"token operator\">>></span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">//We received an integer, good</span>\n      string extra<span class=\"token punctuation\">;</span> <span class=\"token comment\">//to check if anything was entered AFTER the int</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ss <span class=\"token operator\">>></span> extra<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Unexpected \"</span> <span class=\"token operator\">&lt;&lt;</span> extra <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" after the integer.\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//ONLY an int was entered, we're good.</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">//We didn't receive an integer</span>\n      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Please enter an integer\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Retry: \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>One caveat above: I've initialized a new stringstream inside the while loop. This is because re-using stringstreams from previous runs cause severe headaches as documented <a href=\"https://stackoverflow.com/questions/24269167/unexpected-stringstream-behavior\">here</a></p>","timeToRead":9,"excerpt":"In this post I'll talk about some of the common methods to extract input from the user along with best practices and examples. There are…","frontmatter":{"title":"C++ Standard input","date":"2019-07-20T00:00:00.000Z","categories":["General"],"extract":"Common methods to extract input from user and its nuances","thumbnail":"/post-images/input-output.png","tags":["C++","Streams"]},"fields":{"slug":"/c-standard-input","date":"July 20, 2019"}}},"pageContext":{"slug":"/c-standard-input","nexttitle":"String Problems","nextslug":"/string-problems","prevtitle":"Bubble Sort","prevslug":"/bubble-sort"}}}