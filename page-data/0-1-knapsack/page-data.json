{"componentChunkName":"component---src-templates-post-js","path":"/0-1-knapsack","result":{"data":{"markdownRemark":{"html":"<ol>\n<li><a href=\"#introduction\">Introduction</a></li>\n<li><a href=\"#dp-and-recursion\">DP and Recursion</a></li>\n<li>\n<p><a href=\"#0-1-knapsack-problem\">0-1 Knapsack</a></p>\n<ul>\n<li><a href=\"#memoization\">Memoization</a></li>\n<li><a href=\"#tabulation\">Tabulation</a></li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#bottom-up-from-scratch\">Bottom up from Scratch</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#subset-sum\">Subset Sum</a></p>\n<ul>\n<li><a href=\"#bottom-up-from-scratch\">Bottom up from scratch</a></li>\n<li><a href=\"#subset-sum-recursive\">Subset Sum Recursive</a></li>\n</ul>\n</li>\n<li><a href=\"#equal-sum-partition\">Equal Sum Partition</a></li>\n<li><a href=\"#count-subsets-adding-to-given-sum\">Count Subsets Adding to Given Sum</a></li>\n<li><a href=\"#conclusion\">Conclusion</a> </li>\n</ol>\n<h3 id=\"introduction\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h3>\n<p>DP is a general technique for solving optimization, search, and counting problems that can be decomposed into sub-problems. You should consider using DP whenever you have to make choices to arrive at the solution, specifically, when the solution relates to sub-problems.</p>\n<p>Like divide-and-conquer, DP solves the problem by combining the solutions of multiple smaller problems, but what makes DP different is that the same sub-problem may reoccur. Therefore, a key to making DP efficient is caching the results of inter- mediate computations. </p>\n<p>The key to solving a DP problem efficiently is finding a way to break the problem into sub-problems such that</p>\n<ul>\n<li>the original problem can be solved relatively easily once solutions to the subÂ¬ problems are available, and</li>\n<li>these sub-problem solutions are cached. (Usually, but not always, the sub-problems are easy to identify) </li>\n</ul>\n<p>DP can be used to find the total number of ways to do something (for example making a change) and if you optimize how you determine each \"way\", you'd get the optimal solution. Thus, DP can be used to find all combinations AND the optimal solution.</p>\n<p>From the discussion above, it is clear to see that DP is nothing but optimized recursion. Therefore, before jumping into dynamic programming, be sure to go over my <a href=\"/recursion\">recursion</a> post. </p>\n<p>As the title suggests, in this post, we'll be talking about a famous problem called the knapsack problem. This problem has 3 flavors:</p>\n<p>(1) <strong>Fractional Knapsack</strong>: Fractional items allowed (items need not be whole numbers). We won't discuss this here since this is a class of greedy algorithms</p>\n<p>(2) <strong>0 - 1 Knapsack</strong>: Items need to be included as whole or not included. No fractional items allowed. This is what we'll be mainly concerned with here</p>\n<p>(3) <strong>Unbounded Knapsack</strong>: Unlimited supply of items. We'll look at this in <a href=\"/unbounded-knapsack\">unbounded knapsack</a> post.</p>\n<p>In this post, we'll concern ourselves with <strong>0-1 Knapsack</strong>.</p>\n<h3 id=\"dp-and-recursion\"><a href=\"#dp-and-recursion\" aria-label=\"dp and recursion permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DP and recursion</h3>\n<p>I said earlier that DP is optimized recursion. What does that mean? It means that while we're recursing to solve a problem, we might run into instances where we're redoing work that was previously done in another recursive call. As a result we're performing work that has already been done which is obviously inefficient. To get rid of this redundancy, we can trade space for time where we use extra space to store results we've already calculated. This technique of storing results is known as dynamic programming. </p>\n<p>While trying to understand the DP, I found various sources on the internet that used the table creation technique. Our aim should not be to create the said table but to understand WHY that table is created. DP doesn't require the creation of a table for every problem! </p>\n<p>So how do we know that DP is required to solve a given problem:</p>\n<ul>\n<li>\n<p>If DP is optimized recursion, any recursive problem is also a DP problem!</p>\n<ul>\n<li>There'll be a <strong>choice</strong> (include or exclude something etc) to make and the subproblems overlap. If there are more than one calls being made in each recursive call, ie the recursive functions is calling itself more than once, there is a good chance that it can be optimized using DP.</li>\n</ul>\n</li>\n<li>\n<p>DP also deals with optimization as in find the least number of steps, or the most profitable method etc</p>\n<ul>\n<li>There might be keywords such as minimum, maximum, etc. Where you're looking to either find the max or the min or the least or the most!</li>\n</ul>\n</li>\n</ul>\n<p>Therefore, to summarize if there's recursion and there are more than 1 calls being made to the recursive function in each recursive call:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">    <span class=\"token keyword\">return</span> <span class=\"token function\">Fib</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">Fib</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>then we can use DP to cache the results. Secondly, if it is an optimization problem, then using DP is required. Our approach to solving DP problems would be to: </p>\n<ul>\n<li>Write a recursive solution</li>\n<li>Perform memoization (storing results)</li>\n<li>Create a bottom-up table if needed to better visualize the algorithm</li>\n</ul>\n<h3 id=\"0-1-knapsack-problem\"><a href=\"#0-1-knapsack-problem\" aria-label=\"0 1 knapsack problem permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>0-1 Knapsack Problem</h3>\n<p><strong>The knapsack problem is a problem in combinatorial optimization: Given a set of items, each with a weight and a value, determine the number of each item to include in a collection so that the total weight is less than or equal to a given limit and the total value is as large as possible. It derives its name from the problem faced by someone who is constrained by a fixed-size knapsack and must fill it with the most valuable items. The problem often arises in resource allocation where the decision makers have to choose from a set of non-divisible projects or tasks under a fixed budget or time constraint, respectively.</strong></p>\n<p>Why is this a DP problem? because we're being asked to maximize our profit. ie <strong>total value is as large as possible</strong>. In addition, we're also given a bunch of choices: ie <strong>Given a set of items, each with a weight and a value, determine the number of each item to include in a collection</strong></p>\n<p>Let's see what our input will be:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-cpptext\"><code class=\"language-cpptext\">                    Item1   Item2   Item3   Item14\nwt[] in pounds        5       4       6        3    \nval[] in dollars     10      40       30      50\nCapacity: 10       </code></pre></div>\n<p>We'll be given two arrays: a weight array that'll hold the weight of each item and a value array that holds the value of each item in dollars. We'll also be given the capacity of our sack and a value <code class=\"language-cpptext\">n</code> denoting the number of elements in the arrays. </p>\n<p>Let's start writing the recursive solution to this problem:</p>\n<p>Let's say this is our function signature:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">knapSack</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> wt<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> val<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>It'll accept the relevant arrays, the capacity and the size of the arrays ie the actual size: if there are 4 elements, <code class=\"language-cpptext\">n</code> will be 4 </li>\n<li>It'll return an integer to denote the <code class=\"language-cpptext\">max</code> profit</li>\n</ul>\n<p>Ok, now that we have the signature, let's think about the base case: Remember, the <strong>base case</strong> is nothing but the <strong>smallest valid input</strong>. In our case, the smallest valid input is when <code class=\"language-cpptext\">c</code> (or capacity) = 0 (ie we don't have any more space in the bag). Another base case is when there're no more items to consider ie n = 0.  If we have 4 items and we pass the value of <code class=\"language-cpptext\">n</code> as 4, once we get to n = 0, we'll have no more items to process. Therefore, when we're at our base case, our max profit is 0. Let's add this to our function:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">knapSack</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> wt<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> val<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//Base case: there's no more space or no more items</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, let's think about what we can do. To do so, let's see the choices that we have by looking at our arrays:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-cpptext\"><code class=\"language-cpptext\">                                               n \n                                               |\n                    Item1   Item2   Item3   Item4\nwt[] in pounds        5       4       6        3    \nval[] in dollars     10      40       30      50\nCapacity: 10       </code></pre></div>\n<p>Say <code class=\"language-cpptext\">n</code> is at the last element. Here, we have a few choices that we can make:</p>\n<p>(1) The nth element's weight > capacity. In this case we cannot choose this element</p>\n<p>(2) The nth element's weight &#x3C;= capacity. In this case the item is eligible to be picked. Here, we've got two choices:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-cpptext\"><code class=\"language-cpptext\">- We might choose this item\n\n- We might ignore this item</code></pre></div>\n<p>Here's the decision tree:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-cpptext\"><code class=\"language-cpptext\">                            itemN\n                       /             \\   \n                    wt[n] &lt;= c      wt[n] &gt; c\n                   /        \\           |\n                add to bag  don&#39;t add   cannot add</code></pre></div>\n<p>We can either choose itemN or we can ignore it:</p>\n<p>-<strong>Choose</strong>: </p>\n<p>If we choose the item, we'll keep track of its value, reduce the capacity of our bag and continue to recurse:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">val<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token function\">knapSack</span><span class=\"token punctuation\">(</span>wt<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> c <span class=\"token operator\">-</span> wt<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Notice, since we've passed in 4, there's no <code class=\"language-cpptext\">val[4]</code> since arrays are 0 based. So, to get the last element, we'll start with <code class=\"language-cpptext\">val[n-1]</code>. To avoid this you can choose to pass <code class=\"language-cpptext\">n</code> as <code class=\"language-cpptext\">n-1</code> to the function but I preferred to keep <code class=\"language-cpptext\">n</code> as is. Similarly, we're reducing our capacity by the weight of the element we just chose by: <code class=\"language-cpptext\">c - wt[n-1]</code>. Then, we reduce <code class=\"language-cpptext\">n</code> since we're done with processing the current element and move on.</p>\n<p>-<strong>Ignore</strong>: </p>\n<p>If we ignore the item, we'll do nothing with its value. Since we're not picking it, it won't add to our value and it won't decrease our capacity. We simply ignore it and move to the next item:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token function\">knapSack</span><span class=\"token punctuation\">(</span>wt<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>How do we decide, at the end of the day, which item goes in the bag? The item that goes in the bag needs to maximize our profit. So, we'll choose the max of <strong>choosing</strong> the item and <strong>ignoring</strong> the item:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">       \nmax <span class=\"token punctuation\">(</span> \n        <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token function\">knapSack</span><span class=\"token punctuation\">(</span>wt<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> c <span class=\"token operator\">-</span> w<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//choosing the item, so decrease capacity left by weight of item  </span>\n        <span class=\"token function\">knapsack</span><span class=\"token punctuation\">(</span>wt<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>                       <span class=\"token comment\">//Not choosing the item so just move to the next item </span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </code></pre></div>\n<p>Let's see the complete code for the case where wt[n-1] &#x3C;= c: (Again, n-1 because n is the actual size of the array, so calling wt[n] would be an illegal access which is why the -1).</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">knapSack</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> wt<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> val<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//Weight can either be &lt;= c or > c</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wt<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//Choice 1: choose this item</span>\n        <span class=\"token comment\">//Since we're choosing this item, we add the current item's value to whatever we get from next recursive call</span>\n        <span class=\"token keyword\">int</span> profitWithChoosing <span class=\"token operator\">=</span> val<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token function\">knapSack</span><span class=\"token punctuation\">(</span>wt<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> c <span class=\"token operator\">-</span> wt<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//Choice 2: Don't choose this item</span>\n        <span class=\"token comment\">//Since we don't choose this item, we simply ignore its value and move to the next item</span>\n        <span class=\"token keyword\">int</span> profitWithNotChoosing <span class=\"token operator\">=</span> <span class=\"token function\">knapSack</span><span class=\"token punctuation\">(</span>wt<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//Need to return max profit</span>\n        <span class=\"token comment\">//Finally, based on the two decisions above, we choose the max of the two and return that value</span>\n        <span class=\"token keyword\">return</span> max <span class=\"token punctuation\">(</span>profitWithChoosing<span class=\"token punctuation\">,</span> profitWithNotChoosing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//weight is > capacity, just continue recursing...</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">knapSack</span><span class=\"token punctuation\">(</span>wt<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you trace the recursive call stack above, you'll notice that there are multiple values being re-calculated. How do I know this? Well, as I said earlier, if a recursive function is making multiple calls to itself, it is guaranteed to have overlapping computations. In addition, for this solution, we also have the case where we look at each element and for each element we have 2 choices: either we choose the element or we don't. Performing these 2 choice calculations for each element we get running time of this algorithm as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>N</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span></span></span></span></span></span>. We can do much better! </p>\n<h3 id=\"memoization\"><a href=\"#memoization\" aria-label=\"memoization permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Memoization</h3>\n<p>We can actually save values once calculated by either recursive call. As mentioned earlier, this process of saving already calculated values is called <strong>memoization</strong>. To save these results, we need to create a 2D vector of size <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>â</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">n * m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">â</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span>. This vector will then hold our intermediate results. <strong>This intermediate result is nothing but the max profit up till that point</strong>. We'll elaborate more on this below.</p>\n<p>How do we determine the size of our 2D vector? What would be n and what would be m? To determine that, we need to find out the elements we need to keep track of. For example, in the recursive solution above, there's no point in keeping track of the arrays themselves, they're constant. The only two things changing in the algorithm above are:</p>\n<ul>\n<li><code class=\"language-cpptext\">c</code> capacity that decreases with every addition of element</li>\n<li><code class=\"language-cpptext\">n</code> that moves down the arrays. </li>\n</ul>\n<p>Therefore, our 2D vector would be of size c+1 and n+1 to prevent overflow. We'll call this 2D vector dp: </p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This vector will be initialized with the value -1 indicating that we're yet to calculate this value. We'll go ahead and calculate the value and store it in our dp vector. We gave up space to reduce our running time. Therefore, we want to save EACH recursive call's value in the 2D vector so that we're not going to perform calculations that have already been done. </p>\n<p>Let's add this dp vector as a global variable to our program:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">knapSack</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> wt<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> val<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        \n    <span class=\"token comment\">//Check if value is aleady saved:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//Weight can either be &lt;= c or > c</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wt<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//Choice 1: choose this item</span>\n        <span class=\"token comment\">//Since we're choosing this item, we add the current item's value to whatever we get from next recursive call</span>\n        <span class=\"token keyword\">int</span> profitWithChoosing <span class=\"token operator\">=</span> val<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token function\">knapSack</span><span class=\"token punctuation\">(</span>wt<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> c <span class=\"token operator\">-</span> wt<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//Choice 2: Don't choose this item</span>\n        <span class=\"token comment\">//Since we don't choose this item, we simply ignore its value and move to the next item</span>\n        <span class=\"token keyword\">int</span> profitWithNotChoosing <span class=\"token operator\">=</span> <span class=\"token function\">knapSack</span><span class=\"token punctuation\">(</span>wt<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//Need to return max profit</span>\n        <span class=\"token comment\">//Finally, based on the two decisions above, we choose the max of the two and return that value</span>\n        <span class=\"token comment\">//Store the max before returning:</span>\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> max <span class=\"token punctuation\">(</span>profitWithChoosing<span class=\"token punctuation\">,</span> profitWithNotChoosing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//weight is > capacity, just continue recursing...</span>\n        <span class=\"token comment\">//Store in dp before returning:</span>\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">knapSack</span><span class=\"token punctuation\">(</span>wt<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Running time for the memoized version is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>C</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(CN)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span></span></span></span> is the capacity of the sack and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span></span></span></span> is the number of items we're asked to process. </p>\n<p>Let's just summarize what we've done so far:</p>\n<ul>\n<li>Started with a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>N</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span></span></span></span></span></span> recursive solution</li>\n<li>Then added a memoized solution that cached calculated results</li>\n<li>Now, we're looking to omit the recursive calls altogether</li>\n</ul>\n<p>Ok, so we've seen how we can use recursion and memoization to reduce our running time. We're always asking ourselves, can we do better? What is the one glaring thing in the solution above that we can improve? We can try and get rid of the recursive calls that we have in this solution since a recursive call stack can get pretty large for larger inputs. </p>\n<p>If we think along these lines a little more, we'll realize that if we remove the recursive calls, we can derive our solution using just the 2D array that we created in the recursive solution. So, the next question we should ask ourselves is how do we create that table without using recursion? </p>\n<h3 id=\"tabulation\"><a href=\"#tabulation\" aria-label=\"tabulation permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tabulation</h3>\n<p>Ok, so we've decided we're going to get rid of the recursive calls and directly use the matrix. So, if we're directly starting from the matrix, what would be its dimensions? We said earlier, in the memoized solution that our matrix would be used to keep track of only those values that are changing: <code class=\"language-cpptext\">c</code> ie current capacity and <code class=\"language-cpptext\">n</code> which is the current item we're considering. So, our tabular method will also need a matrix of size c+1 * n+1. </p>\n<p>Ok, we've decided that we're removing the recursive call and using the matrix. Let's see this matrix first (notice how I've switched <code class=\"language-cpptext\">n</code> and <code class=\"language-cpptext\">c</code>):</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><strong>0</strong></th>\n<th><strong>1</strong></th>\n<th><strong>2</strong></th>\n<th><strong>3</strong></th>\n<th><strong>4</strong></th>\n<th><strong>5</strong></th>\n<th><strong>6</strong></th>\n<th><strong>7</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>0</strong></td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td><strong>1</strong></td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td><strong>2</strong></td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td><strong>3</strong></td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td><strong>4</strong></td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<p>Notice the number of rows are n + 1 (there are 4 items but the array size is 5) and the column size is capacity + 1 (capacity is 10 but array size is 11). That is because we have to account for the initialization (base case in recursive solution).</p>\n<p>So I've got the capacity, which is 10 going from 0 to 10 and the number of items going top to bottom from 0 to 4. These dimensions are <code class=\"language-cpptext\">c + 1</code> and <code class=\"language-cpptext\">n + 1</code> respectively and the final answer will be in <code class=\"language-cpptext\">dp[c][n]</code>.</p>\n<p>Next thing we need to do with the matrix is initialize it with 0s:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now why 0s and not -1 like we did earlier? Let's think about it: We've decided to convert our recursive function to an iterative solution. Let's start with the base condition:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token comment\">//Recursive:</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">knapSack</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> wt<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> val<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The recursive solution had the base condition where it said that if there are no items or there is no capacity, return 0. Since we'll be using the 2D matrix to solve this iteratively, we need to somehow capture this information in that 2D matrix. Recursive solution said, if n is 0 or c is 0, we'll return 0. So, in the matrix, where n is 0 or c is 0, we'll save 0:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> dp<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// row where n == 0 save all 0s</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Secondly, since there are no more recursive calls, we're going to use iterative calls to then populate the table. So, let's have another look at the recursive solution:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">knapSack</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> wt<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> val<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//******* This part is done *******</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//Weight can either be &lt;= c or > c</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wt<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//Choice 1: choose this item</span>\n        <span class=\"token comment\">//Since we're choosing this item, we add the current item's value to whatever we get from next recursive call</span>\n        <span class=\"token comment\">//OK: This needs to be edited..... EDIT 1</span>\n        <span class=\"token keyword\">int</span> profitWithChoosing <span class=\"token operator\">=</span> val<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token function\">knapSack</span><span class=\"token punctuation\">(</span>wt<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> c <span class=\"token operator\">-</span> wt<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//Choice 2: Don't choose this item</span>\n        <span class=\"token comment\">//Since we don't choose this item, we simply ignore its value and move to the next item</span>\n        <span class=\"token comment\">//OK: This needs to be edited..... EDIT 2</span>\n        <span class=\"token keyword\">int</span> profitWithNotChoosing <span class=\"token operator\">=</span> <span class=\"token function\">knapSack</span><span class=\"token punctuation\">(</span>wt<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//Need to return max profit</span>\n        <span class=\"token comment\">//Finally, based on the two decisions above, we choose the max of the two and return that value</span>\n        <span class=\"token comment\">//Store the max before returning:</span>\n        <span class=\"token comment\">//OK: This needs to be edited..... EDIT 3</span>\n        <span class=\"token keyword\">return</span> max <span class=\"token punctuation\">(</span>profitWithChoosing<span class=\"token punctuation\">,</span> profitWithNotChoosing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//weight is > capacity, just continue recursing...</span>\n        <span class=\"token comment\">//Store in dp before returning:</span>\n        <span class=\"token comment\">//OK: This needs to be edited..... EDIT 4</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">knapSack</span><span class=\"token punctuation\">(</span>wt<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Edit 1</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">        <span class=\"token comment\">//OK: This needs to be edited..... EDIT 1</span>\n        <span class=\"token keyword\">int</span> profitWithChoosing <span class=\"token operator\">=</span> val<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token function\">knapSack</span><span class=\"token punctuation\">(</span>wt<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> c <span class=\"token operator\">-</span> wt<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This part gets the profit for us if we actually choose the current element. Therefore, we need to remove the recursive call from here. All the information that we need is in the table:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">        <span class=\"token keyword\">int</span> profitWithChoosing <span class=\"token operator\">=</span> val<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c <span class=\"token operator\">-</span> wt<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>So, instead of recursing, we grab the value from our 2D matrix. Notice how we grab from <code class=\"language-cpptext\">n-1</code> and <code class=\"language-cpptext\">c - wt[n-1]</code>. That is because we've already calculated these values. Since the table is <code class=\"language-cpptext\">dp[n][c]</code>, any edits we made in the recursive calls to these values, should be kept in that order. If we had <code class=\"language-cpptext\">dp[c][n]</code>, then this same translation would've been:</p>\n<p><code class=\"language-cpptext\">dp[c- wt[n]][n-1];</code></p>\n<p>Ok, so we've made edit 1. Let's make the remaining edits:</p>\n<p><strong>Edit 2</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">        <span class=\"token comment\">//OK: This needs to be edited..... EDIT 2</span>\n        <span class=\"token keyword\">int</span> profitWithNotChoosing <span class=\"token operator\">=</span> <span class=\"token function\">knapSack</span><span class=\"token punctuation\">(</span>wt<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This part deals with the decision where we choose NOT to include the current element. </p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">        <span class=\"token keyword\">int</span> profitWithNotChoosing <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Similar to how we made edit 1, we grab the value from previously calculated values.</p>\n<p><strong>Edit 3</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">        <span class=\"token comment\">//OK: This needs to be edited..... EDIT 3</span>\n        <span class=\"token keyword\">return</span> max <span class=\"token punctuation\">(</span>profitWithChoosing<span class=\"token punctuation\">,</span> profitWithNotChoosing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here, we're returning the max of our two choices. There's nothing to return since our function will only return once at the end with the max profit. We do, however, need to update our max profits for current cell which is done here, replacing the return call:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">    dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> max <span class=\"token punctuation\">(</span>profitWithChoosing<span class=\"token punctuation\">,</span> profitWithNotChoosing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Edit 4</strong>\nThis call deals with handling the case where the current weight is > capacity, where we just ignore the current item:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">        <span class=\"token comment\">//OK: This needs to be edited..... EDIT 4</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">knapSack</span><span class=\"token punctuation\">(</span>wt<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As was the case with edit 3, we'll simply update the current cell and return nothing:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">    dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>One thing we've done above is used <code class=\"language-cpptext\">n</code> and <code class=\"language-cpptext\">c</code> to populate our 2D matrix. However, <code class=\"language-cpptext\">n</code> and <code class=\"language-cpptext\">c</code> already represent some values in our solution ie the number of elements and capacity of our sack. So, we need new variables so that we can iterate over all <code class=\"language-cpptext\">n</code> and <code class=\"language-cpptext\">c</code> values. To do so, we'll use <code class=\"language-cpptext\">i</code> in lieu of <code class=\"language-cpptext\">n</code> and <code class=\"language-cpptext\">j</code> in lieu of <code class=\"language-cpptext\">c</code>. </p>\n<p>Also, remember we had already initialized the first row and first column with our base condition, so we'll start at index (1,1). This is where <code class=\"language-cpptext\">i</code> and <code class=\"language-cpptext\">j</code> will start. So, replace <code class=\"language-cpptext\">n</code> and <code class=\"language-cpptext\">c</code> with <code class=\"language-cpptext\">i</code> and <code class=\"language-cpptext\">j</code> and start <code class=\"language-cpptext\">i</code> and <code class=\"language-cpptext\">j</code> at (1,1) and then fill out your table to get the final solution at the end:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber 0\" class=\"language-cppcpp line-numbers\"><code class=\"language-cppcpp\">vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">knapSack</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> wt<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> val<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//Weight can either be &lt;= c or > c</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> c<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wt<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">//Choice 1: choose this item</span>\n                <span class=\"token comment\">//Since we're choosing this item, we add the current item's value to whatever we get from next recursive call</span>\n        <span class=\"token comment\">//        int profitWithChoosing = val[n] + knapSack(wt, val, c - wt[n], n-1);</span>\n                <span class=\"token keyword\">int</span> profitWithChoosing <span class=\"token operator\">=</span> val<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>wt<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                \n                <span class=\"token comment\">//Choice 2: Don't choose this item</span>\n                <span class=\"token comment\">//Since we don't choose this item, we simply ignore its value and move to the next item</span>\n        <span class=\"token comment\">//        int profitWithNotChoosing = knapSack(wt, val, c, n-1);</span>\n                <span class=\"token keyword\">int</span> profitWithNotChoosing <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//Need to return max profit</span>\n                <span class=\"token comment\">//Finally, based on the two decisions above, we choose the max of the two and return that value</span>\n        <span class=\"token comment\">//        return = max (profitWithChoosing, profitWithNotChoosing);</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> max <span class=\"token punctuation\">(</span>profitWithChoosing<span class=\"token punctuation\">,</span> profitWithNotChoosing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">//weight is > capacity, just continue recursing...</span>\n        <span class=\"token comment\">//        return knapSack(wt, val, c, n-1);</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// insert code here...</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> wt <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> val <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> maxProfit <span class=\"token operator\">=</span> <span class=\"token function\">knapSack</span><span class=\"token punctuation\">(</span>wt<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Max profit: \"</span> <span class=\"token operator\">&lt;&lt;</span> maxProfit <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>On line 7, we're checking <code class=\"language-cpptext\">wt[i-1]</code> because say <code class=\"language-cpptext\">i</code> is 1 (our smallest possible start value), we're actually interested in the weight of 0th element since that is our starting point. Also, <code class=\"language-cpptext\">j</code> is actually the capacity starting from 0, all the way up till actual capacity so there's no capacity array we're indexing into. Therefore, we're looking at one previous index for <code class=\"language-cpptext\">i</code> (which is <code class=\"language-cpptext\">n</code>) and using current <code class=\"language-cpptext\">j</code> value.\nRunning time: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>c</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(cn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>So, in this problem, we were given a list of items (with weights and values associated) and we had a bag that had a capacity. We were asked to fill our bag while maximizing profits. To do so, we had choices that could be made based on each item. There are plenty of problems where this type of pattern can be re-applied.</p>\n<h3 id=\"summary\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h3>\n<p>In the tabular approach: </p>\n<ul>\n<li>We first created a 2D matrix of size dp[n+1][c+1]</li>\n<li>We then initialized the 2D matrix to whatever the base case was in the recursive solution</li>\n<li>We then replaced each recursive call with a call to the 2D matrix and retrieved already calculated values</li>\n<li>We then iterated over the entire 2D matrix until we go to the last cell, dp[n][c] which then held the final profit for us!</li>\n</ul>\n<h3 id=\"bottom-up-from-scratch\"><a href=\"#bottom-up-from-scratch\" aria-label=\"bottom up from scratch permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bottom up from scratch</h3>\n<p>We've seen 0-1 being solved using recursion and tabular methods. It is clear that the tabular method is faster and efficient, therefore, why not use that approach directly? This creation of table approach is also called <strong>bottom up</strong> because you start with the smallest possible solution and work your way up to the actual solution.</p>\n<p>For the sake of discussion, let's use the following as our input and capacity:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"> wt <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// weight of each item in pounds</span>\n val <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//value of each item in dollars</span>\n c <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//capacity in pounds</span></code></pre></div>\n<p>(1) We know we'll be creating a 2D matrix of size n+1 * c + 1. Why those dimensions? Because we need to keep track of the changing values. Therefore, our rows are the items we're considering and each column represents the capacity of our knapsack</p>\n<p>(2) Next, we need to initialize the 2D matrix. If there are no items given to us, ie row 0, then no matter what the capacity of our sack is, our max profit will ALWAYS be 0. Therefore row 0 is all 0s. Next, if our knapsack has no capacity, then no matter how many items I'm given, my max profit will always be 0. Therefore column 0 is all 0s. Remaining 0s need to be filled with correct values.</p>\n<p>This will be the only time in our solution where we've manually assigned values. Most tutorials focus on going through the process of filling in the table by hand and then these tutorials drop the recursive formula and expect one to memorize it. Here, we'll see how we can reach a conclusion logically!</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><strong>0</strong></th>\n<th><strong>1</strong></th>\n<th><strong>2</strong></th>\n<th><strong>3</strong></th>\n<th><strong>4</strong></th>\n<th><strong>5</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>0</strong></td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td><strong>1</strong> (1)</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td><strong>2</strong> (1,3)</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td><strong>3</strong> (1,3,4)</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td><strong>4</strong> (1,3,4,5)</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<p>(3) We'll keep track of rows using <code class=\"language-cpptext\">i</code> and columns using <code class=\"language-cpptext\">j</code>. Let's start with i = 1 and j = 1 (the first unfilled position). ie (1,1). This means, we've been given the first item with weight 1 and our capacity is also 1. At this point, we've got 2 choices:</p>\n<ul>\n<li>chose item with weight 1 </li>\n<li>ignore item with weight 1.</li>\n</ul>\n<p><strong>Choose</strong>:</p>\n<p>Say I chose this item, then my new capacity is 1 - 1 = 0. And since I've chosen this item, I cannot pick this item again so my available items to be picked falls from 1 to 0. In essence, we've reduced our problem from finding the max profit from 1 item and capacity of 1 to no item and capacity of 0. Now, remember we said that we want to get current value from previously calculated values? Do I know what the profit is if my items are 0 and capacity is 0? ie do I know what dp[0][0] is? YES! It is 0! But wait, we're not done. Since we've chosen this item, we need to add its value to the value we got from the sub-problem. </p>\n<p>Therefore:</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>choose</mtext><mo>=</mo><mtext>valueÂ ofÂ currentÂ item</mtext><mo>+</mo><mtext>maxÂ profitÂ fromÂ remainingÂ capacityÂ andÂ fromÂ remainingÂ items</mtext></mrow><annotation encoding=\"application/x-tex\"> \\textrm{choose} = \\textrm{value of current item} + \\textrm{max profit from remaining capacity and from remaining items} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord text\"><span class=\"mord textrm\">choose</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord text\"><span class=\"mord textrm\">valueÂ ofÂ currentÂ item</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord text\"><span class=\"mord textrm\">maxÂ profitÂ fromÂ remainingÂ capacityÂ andÂ fromÂ remainingÂ items</span></span></span></span></span></span>\n<p>Converting this to code, we have:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token keyword\">int</span> choose <span class=\"token operator\">=</span> val<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> wt<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This comes out to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>+</mo><mn>0</mn><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2 + 0 = 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span></p>\n<p><strong>Ignore</strong>:</p>\n<p>If I ignore the current item, then I need the max profit from not picking this item. Do I have the information for the max profit I get if my capacity is 1 and my items are everything BUT the current item? Yes! It is in dp[0][1] = 0. We won't add the value for the current item since we're ignoring it. </p>\n<p>Converting this to code, we have:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token keyword\">int</span> ignore <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, that I have the values for the profit if I choose the item and the value if I ignore the item, my max profit would obviously be the <strong>max</strong> of these two vales. Therefore,</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>choose<span class=\"token punctuation\">,</span> ignore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We continue using this logic to fill out our first row. max of 2 and 0 is 2:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><strong>0</strong></th>\n<th><strong>1</strong></th>\n<th><strong>2</strong></th>\n<th><strong>3</strong></th>\n<th><strong>4</strong></th>\n<th><strong>5</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>0</strong></td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td><strong>1</strong> (1)</td>\n<td>0</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td><strong>2</strong> (1,3)</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td><strong>3</strong> (1,3,4)</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td><strong>4</strong> (1,3,4,5)</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<p>Once we're done filling the table, our final answer will be in the position dp[n][capacity].</p>\n<p>Running time is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo>â</mo><mi>T</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N * Target)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">â</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span></span></span></span></p>\n<h3 id=\"subset-sum\"><a href=\"#subset-sum\" aria-label=\"subset sum permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Subset Sum</h3>\n<p>Let's look at a derivative of the 0-1 knapsack called the subset sum: <strong>Given an array of values, find if a subset in the array adds up to a given sum. Your function should return true if there exists such a subset, false otherwise.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">input array<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\ntarget<span class=\"token operator\">:</span> <span class=\"token number\">17</span></code></pre></div>\n<p>Why is this 0-1's derivation? Similar to the knapsack problem, this problem has given us an array of values and we've got the option of either choosing that value or rejecting it. The choices that we have are limited by the array given to us and the goal is to reach a specific value. Therefore, it can be considered a problem similar to 0-1 knapsack.</p>\n<h3 id=\"bottom-up-from-scratch-1\"><a href=\"#bottom-up-from-scratch-1\" aria-label=\"bottom up from scratch 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bottom up from scratch</h3>\n<p>Let's say that you were given the subset sum problem and instead of starting out with the recursive solution, you want to start out with the bottom up solution directly. This is the preferred approach since bottom up is the most efficient solution How would we go about doing that without going through the entire recursive solution? Let's think through this logically.</p>\n<p>We've decided to create a table and its dimensions would be based on the number of items we have and the sum we're targeting. Therefore, our rows would represent each item, and columns would represent the target sum. For the sake of an easier example, let's say this is our input and target:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">input<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">//lets call this arr</span>\ntarget<span class=\"token operator\">:</span> <span class=\"token number\">5</span></code></pre></div>\n<p>In that case this is what our 2D matrix dimensions would be: dp[n+1][target+1] = dp[5][6] and we would initialize all values to false initially:\n<strong>(We're only given the original input array and the sum we're targeting, therefore, we'll substitute the weight array in our original 0-1 knapsack with this input array and ignore the values array from 0-1 knapsack. Other than that, the entire setup stays the same! So keep in mind: if a single array is given, treat it as the weight array and ignore the values array!)</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">>></span>dp <span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>target<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><strong>0</strong></th>\n<th><strong>1</strong></th>\n<th><strong>2</strong></th>\n<th><strong>3</strong></th>\n<th><strong>4</strong></th>\n<th><strong>5</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>0</strong></td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n</tr>\n<tr>\n<td><strong>1</strong> (2)</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n</tr>\n<tr>\n<td><strong>2</strong> (2,3)</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n</tr>\n<tr>\n<td><strong>3</strong> (2,3,4)</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n</tr>\n<tr>\n<td><strong>4</strong> (2,3,4,1)</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n</tr>\n</tbody>\n</table>\n<p>Next, we'll think about the base cases: </p>\n<ul>\n<li>If the target is 0, ie column 0, then no matter how many inputs we're given, we can achieve the target of 0 by including the empty subset. Therefore column 0 wil have all values as true.</li>\n<li>If the input is 0, then no matter what the target is (except for 0), we cannot achieve that target. Therefore row 0 will have all false values except for (0,0):</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><strong>0</strong></th>\n<th><strong>1</strong></th>\n<th><strong>2</strong></th>\n<th><strong>3</strong></th>\n<th><strong>4</strong></th>\n<th><strong>5</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>0</strong></td>\n<td>T</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n</tr>\n<tr>\n<td><strong>1</strong> (2)</td>\n<td>T</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n</tr>\n<tr>\n<td><strong>2</strong> (2,3)</td>\n<td>T</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n</tr>\n<tr>\n<td><strong>3</strong> (2,3,4)</td>\n<td>T</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n</tr>\n<tr>\n<td><strong>4</strong> (2,3,4,1)</td>\n<td>T</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n</tr>\n</tbody>\n</table>\n<p>Alright, we've handled the initialization. Now, we'll start with (1,1) and see what that means:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><strong>0</strong></th>\n<th><strong>1</strong></th>\n<th><strong>2</strong></th>\n<th><strong>3</strong></th>\n<th><strong>4</strong></th>\n<th><strong>5</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>0</strong></td>\n<td>T</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n</tr>\n<tr>\n<td><strong>1</strong> (2)</td>\n<td>T</td>\n<td><strong>X</strong></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>2</strong> (2,3)</td>\n<td>T</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>3</strong> (2,3,4)</td>\n<td>T</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>4</strong> (2,3,4,1)</td>\n<td>T</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>Let's assume our rows are being tracked by variable <code class=\"language-cpptext\">i</code> and columns are being tracked by variable <code class=\"language-cpptext\">j</code>.</p>\n<p>What does the value at (1,1) mean? It means that we're given just the first element in our array, ie 2, and the target is 1. Now with this given element, we have two choices, we either pick the element, or we ignore it. In either choice, our aim is to see if we can get to the target sum of our current position (ie 1, which is the column we're in. Remember the columns represent intermediate sums). </p>\n<ul>\n<li>If we ignore this element, it means our array has no elements: <code class=\"language-cpptext\">{}</code>. What happens if the target is 1 and we have no elements? Do we have this information somewhere? YES! It is one row above our current position staying in the same column: ie (0,1). We filled that row during initialization. Ok, if we ignore 2, we have a false: <code class=\"language-cpptext\">int ignore = dp[i-1][j]</code> This means we move back up one row but stay in the same column to get result of ignoring this element.</li>\n<li>If we choose this element, it means our array has this: {2}. What happens if the target is 1 and we have only one element that is greater than our target? ie arr[i] > j. This means that we cannot make this sum since the element we're considering is already greater than the sum we want,so false. What if we choose this element and the target is greater than the element? We'll look at another example down the line to see how we decide for it.</li>\n</ul>\n<p>Now if either one of our decisions: ignore or choose, result in a true we can conclude that we can get to the sum. Now, we're deciding for dp[i][j] or (1,1): We've got the answers for our two choices in variables <code class=\"language-cpptext\">ignore</code> and <code class=\"language-cpptext\">choose</code>. How do we decide which one goes at dp[i][j]? If we can get to the sum by either ignoring the current element OR choosing it, we can conclude that we can get to the target sum. Therefore, we'll OR the two answers. </p>\n<p>Let's conclude this section with the code we've seen:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token comment\">//ignore:</span>\n<span class=\"token keyword\">int</span> ignore <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//Choose:</span>\n<span class=\"token comment\">//TODO!</span>\n\n<span class=\"token comment\">//What to do after we have our choose and ignore elements? OR them:</span>\ndp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ignore <span class=\"token operator\">||</span> choose<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Based on the discussion above, we have this:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><strong>0</strong></th>\n<th><strong>1</strong></th>\n<th><strong>2</strong></th>\n<th><strong>3</strong></th>\n<th><strong>4</strong></th>\n<th><strong>5</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>0</strong></td>\n<td>T</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n</tr>\n<tr>\n<td><strong>1</strong> (2)</td>\n<td>T</td>\n<td><strong>F</strong></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>2</strong> (2,3)</td>\n<td>T</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>3</strong> (2,3,4)</td>\n<td>T</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>4</strong> (2,3,4,1)</td>\n<td>T</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>What about (1,2) ie we're filling position dp[1][2]? Can we get a sum of 2 with the given array as [2]? This is where we'll look to decide how to pick the <code class=\"language-cpptext\">choose</code> variable now that our target is &#x3C;= the element. Ok, so we've got the element as 2 and our target is also 2. We've got two options:</p>\n<ul>\n<li>ignore: <code class=\"language-cpptext\">int ignore = dp[i-1][j];</code> which is dp[0][2] which is false.</li>\n<li>choose: Ok, we now choose this element since it is NOT greater than the sum. We can see that by picking 2, we can get to the sum but again <strong>the idea is to come to a decision using ONLY the information we have so far</strong>. </li>\n</ul>\n<p>Therefore, if we pick 2, what do we do? Think about it, if we pick 2, our new target sum now becomes: 2 - 2 = 0. We were initially going to check if we can get to target 2 using only elements:  <code class=\"language-cpptext\">{2}</code>. Now if we've chosen to pick this element, our new sum becomes 0 because subtracting 2 from the target brings us to 0. Now, we've picked 2 but our target is 0. <strong>If we've picked 2, it is gone from our input array right because we've chosen the element and it is no longer available to be picked.</strong> This is an important idea to get our head around. Since this is 0-1 knapsack, we've picked the element and cannot pick it again so it is gone from our available input. Therefore, we fall back to previous row, ie row 0. Now, in row 0, which element do we look at? We look at element 0. Why is that? Because our new sum, after including current element 2 became 0: 2 - 2 = 0. </p>\n<p>Let me repeat what we did: </p>\n<ul>\n<li>\n<p>We first chose the current element and got the new sum: </p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token keyword\">int</span> newSum <span class=\"token operator\">=</span> currentSum <span class=\"token operator\">-</span> valueOfChosenElement<span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-cpptext\">currentSum</code> is nothing but the value of <code class=\"language-cpptext\">j</code> because remember <code class=\"language-cpptext\">j</code> is keeping track of the column or the sum we're solving for.</p>\n</li>\n<li>\n<p>We then proceeded to remove the element from our array since we've chosen it meaning:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token keyword\">int</span> newRow <span class=\"token operator\">=</span> currentRow <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-cpptext\">currentRow</code> is nothing but the value of <code class=\"language-cpptext\">i</code> because remember <code class=\"language-cpptext\">i</code> is keeping track of the current row we're in.</p>\n</li>\n</ul>\n<p>Finally, we extract the value from:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">dp<span class=\"token punctuation\">[</span>newRow<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>newSum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Therefore, putting it all together:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token keyword\">int</span> newRow <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> newSum <span class=\"token operator\">=</span> j <span class=\"token operator\">-</span> valueOfChosenElement<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> choose <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>newRow<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> valueOfChosenElement<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Therefore, here's the code for our options when we can choose an element or ignore it and assign the relevant value to dp[i][j]:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token keyword\">int</span> ignore <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> choose <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> valueOfChosenElement<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\ndp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ignore <span class=\"token operator\">||</span> choose<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ok, so we've got this much so far:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><strong>0</strong></th>\n<th><strong>1</strong></th>\n<th><strong>2</strong></th>\n<th><strong>3</strong></th>\n<th><strong>4</strong></th>\n<th><strong>5</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>0</strong></td>\n<td>T</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n</tr>\n<tr>\n<td><strong>1</strong> (2)</td>\n<td>T</td>\n<td>F</td>\n<td><strong>T</strong></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>2</strong> (2,3)</td>\n<td>T</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>3</strong> (2,3,4)</td>\n<td>T</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>4</strong> (2,3,4,1)</td>\n<td>T</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>It is then easy to see how we'd fill up row number 1:\nSay we're now filling dp[1][3]:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token comment\">//Is element > sum? ie is 2 > 3 No, so we can proceed with either choosing or ignoring the element </span>\n<span class=\"token keyword\">int</span> ignore <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token comment\">// dp[0][3] which is false</span>\n<span class=\"token keyword\">int</span> choose <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> valueChosen<span class=\"token punctuation\">]</span> <span class=\"token comment\">// dp[0][3-2] = dp[0][1] which is false</span>\ndp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ignore <span class=\"token operator\">||</span> choose<span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span></code></pre></div>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><strong>0</strong></th>\n<th><strong>1</strong></th>\n<th><strong>2</strong></th>\n<th><strong>3</strong></th>\n<th><strong>4</strong></th>\n<th><strong>5</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>0</strong></td>\n<td>T</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n<td>F</td>\n</tr>\n<tr>\n<td><strong>1</strong> (2)</td>\n<td>T</td>\n<td>F</td>\n<td>T</td>\n<td><strong>F</strong></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>2</strong> (2,3)</td>\n<td>T</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>3</strong> (2,3,4)</td>\n<td>T</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>4</strong> (2,3,4,1)</td>\n<td>T</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>Now we can easily fill out the table! The point of dynamic programming is to get current solution from previously calculated solutions! Here's the complete code for tabular solution:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber 0\" class=\"language-cppcpp line-numbers\"><code class=\"language-cppcpp\"><span class=\"token keyword\">bool</span> <span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> vals<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">>></span> dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> dp<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//Initialization</span>\n        dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> vals<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> vals<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> target<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vals<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">bool</span> picked <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> vals<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">bool</span> ignore <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> picked <span class=\"token operator\">||</span> ignore<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>A few caveats to the solution above:</p>\n<ul>\n<li>notice on line 9, we're looking at <code class=\"language-cpptext\">vals[i-1]</code>. That is because we're starting to fill out the table from (1,1) however we're considering elements starting at 0 in our values array. That is why we check <code class=\"language-cpptext\">vals[i-1]</code> instead of <code class=\"language-cpptext\">vals[i]</code>. Why do I not do the same thing for <code class=\"language-cpptext\">j</code>? because <code class=\"language-cpptext\">j</code> is tracking the sum from 0 to target so it doesn't makes sense!</li>\n</ul>\n<p>Running time: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo>â</mo><mi>T</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N * Target)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">â</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span></span></span></span> </p>\n<p>For the sake of completeness, we can also look at recursive solution:  </p>\n<h3 id=\"subset-sum-recursive\"><a href=\"#subset-sum-recursive\" aria-label=\"subset sum recursive permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Subset Sum Recursive</h3>\n<p>Function signature: So the problem asks us to return true or false so boolean would be our return type. We'll accept the values array, the target and the size of the values array:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber 0\" class=\"language-cppcpp line-numbers\"><code class=\"language-cppcpp\"><span class=\"token keyword\">bool</span> <span class=\"token function\">isPossible</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> vals<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Base case: We can think about the smallest valid input where:</p>\n<ul>\n<li>target is 0: we can choose no elements from the array and get to 0</li>\n<li>array is 0: no matter what target we're given, we won't be able to get to the target with no elements.</li>\n</ul>\n<p>Here's the code for the base case:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber 0\" class=\"language-cppcpp line-numbers\"><code class=\"language-cppcpp\"><span class=\"token keyword\">bool</span> <span class=\"token function\">isPossible</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> vals<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Next, what if the value is greater than the target? Simply ignore it and move on to the next value in the array:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber 0\" class=\"language-cppcpp line-numbers\"><code class=\"language-cppcpp\"><span class=\"token keyword\">bool</span> <span class=\"token function\">isPossible</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> vals<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vals<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> target<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">isPossible</span><span class=\"token punctuation\">(</span>vals<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Next, what if the value is less than target? Ok, in that case we have 2 choices: pick the element, or ignore the element:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber 0\" class=\"language-cppcpp line-numbers\"><code class=\"language-cppcpp\"><span class=\"token keyword\">bool</span> <span class=\"token function\">isPossible</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> vals<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vals<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> target<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">isPossible</span><span class=\"token punctuation\">(</span>vals<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">bool</span> picked <span class=\"token operator\">=</span> <span class=\"token function\">isPossible</span><span class=\"token punctuation\">(</span>vals<span class=\"token punctuation\">,</span> target <span class=\"token operator\">-</span> vals<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// choose element</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>picked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//Found that it adds to target</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">bool</span> ignore <span class=\"token operator\">=</span> <span class=\"token function\">isPossible</span><span class=\"token punctuation\">(</span>vals<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ignore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//Found it adds to target</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//none of the above hold</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Running time for this approach is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mi>N</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(2^N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.</p>\n<h3 id=\"equal-sum-partition\"><a href=\"#equal-sum-partition\" aria-label=\"equal sum partition permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Equal Sum Partition</h3>\n<p>This is another interesting problem: <strong>Given an array, determine if the values in the array can be partitioned into two sets that have equal sums.</strong></p>\n<p>Example: {2,3,7,8,10}\nAnswer: True: {2,3,10} and {8,7}</p>\n<p>This problem is similar to subset sum where were trying to find if a subset adds up to a given sum. Here however, we need to make an observation:</p>\n<ul>\n<li>If the sum in the array is even, then and only then will we be able to partition it into two equal subsets</li>\n</ul>\n<p>If the sum in the array is even, we know we can divide the sum by 2 and then check to see if there's a subset in the array that adds to that sum. If so, then obviously remaining elements would add up to the remaining half of the sum. Let's look at the example we used above:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">Example<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span>\nAnswer<span class=\"token operator\">:</span> True<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">and</span> <span class=\"token punctuation\">{</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>If I had the array as: {2,3,7,8,12} then even though the sum turns out to be even, it cannot be broken into two partitions based on the elements provided. Therefore, all we need to do is check if the sum is even and then call the logic for subset sum with the target as sum/2. </p>\n<p>Here's the code:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token keyword\">bool</span> <span class=\"token function\">canBePartitioned</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> vals<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">>></span> dp <span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> dp<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> target<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vals<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">bool</span> chosen <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> vals<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">bool</span> ignored <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> chosen <span class=\"token operator\">||</span> ignored<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// insert code here...</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> vals <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> vals<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        sum <span class=\"token operator\">+=</span> vals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">bool</span> ans <span class=\"token operator\">=</span> <span class=\"token function\">canBePartitioned</span><span class=\"token punctuation\">(</span>vals<span class=\"token punctuation\">,</span> sum<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>vals<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Yes!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"No!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"No!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Running time: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo>â</mo><mi>T</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N*Target)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">â</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span></span></span></span></p>\n<h3 id=\"count-subsets-adding-to-given-sum\"><a href=\"#count-subsets-adding-to-given-sum\" aria-label=\"count subsets adding to given sum permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Count Subsets Adding to Given Sum</h3>\n<p><strong>Given an array, count the number of subsets that add up to a given target. Your function should return the number of subsets found.</strong></p>\n<p>Example: {2,3,5,8,10} Target: 10\n{2,3,5}\n{2,8}\n{10}\nSo return 3</p>\n<p>Why does this qualify as a 0-1 knapsack? Again because we've got limited items to choose from and for each item we need to make a decision: whether we choose that item or ignore it.</p>\n<p>Ok, this sounds similar to the subset sum problem. Let's revisit it: in that problem, we were asked to see if there existed a given subset that would add up to a target. All we had to return was true or false:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token keyword\">bool</span> <span class=\"token function\">subsetSum</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> vals<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">>></span> dp <span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> dp<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">//n = i and target = j</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> target<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> target<span class=\"token punctuation\">)</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">bool</span> choose <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> vals<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">bool</span> ignored <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> choose <span class=\"token operator\">||</span> ignore<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the code above, all we did was initialize our 2d matrix, and check to see if the sum was by choosing OR ignoring the value. As soon as we got either one to be true, we just added true for the current sub-problem and moved on.</p>\n<p>In our current problem, we can't just check if the sum can be formed or not. We also need to keep a count for the number of subsets found. The logic remains the same but a few things need to change:</p>\n<ul>\n<li>Return type from our function</li>\n<li>What to do when we actually find a subset?</li>\n</ul>\n<p>Let's answer these one by one:</p>\n<p><strong>Return type from our function</strong>\nObviously, we can't return true when we're being asked to get the count of subsets, so we'll return an int.</p>\n<p><strong>What to do when we actually find a subset?</strong>\nOk, so what do we change this logic to? Here's what subset sum had:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">                <span class=\"token keyword\">bool</span> choose <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> vals<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">bool</span> ignored <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> choose <span class=\"token operator\">||</span> ignore<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ok, let's think through this. If we've already found a subset earlier, all we need to do is add it to the current sum:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">                <span class=\"token keyword\">int</span> choose <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> vals<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> ignored <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> choose <span class=\"token operator\">+</span> ignore<span class=\"token punctuation\">;</span></code></pre></div>\n<p>That's it! Here's the complete code:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">totalCount</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> vals<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> dp<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> target<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vals<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">//choose</span>\n                <span class=\"token keyword\">int</span> chosen <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> vals<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> ignored <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> chosen <span class=\"token operator\">+</span> ignored<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Running time: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo>â</mo><mi>T</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N*Target)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">â</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">)</span></span></span></span></p>\n<h3 id=\"conclusion\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h3>\n<ul>\n<li>0-1 Knapsack is applied when you're given a limited supply of items and you can either pick an element or ignore it <strong>in its entirety</strong>: there are no fractional picks</li>\n<li>\n<p>To solve such problems:</p>\n<ul>\n<li>We first create a 2D matrix of size dp[n+1][c+1]</li>\n<li>We then initialize a 2D matrix to whatever the base case was in the recursive solution</li>\n<li>We then replace each recursive call with a call to the 2D matrix and retrieve already calculated values</li>\n<li>We then iterate over the entire 2D matrix until we go to the last cell, dp[n][c] which holds the final value for us!</li>\n</ul>\n</li>\n<li>Best approach is to start with the bottom up approach and think through the choices (choose or ignore) and the decision that needs to be made based on the results we get from those choices.</li>\n<li>DP is applied usually when you need to iterate or find something from ALL combinations of a sequence</li>\n<li>It can be used for optimization problems (find minimum or maximum)</li>\n<li>DP can be used when you're looking for a combination out of possible scenarios. These are questions where you need to make decisions based on where you are in the algorithm</li>\n</ul>","timeToRead":41,"excerpt":"Introduction DP and Recursion 0-1 Knapsack Memoization Tabulation Summary Bottom up from Scratch Subset Sum Bottom up from scratch Subsetâ¦","frontmatter":{"title":"0-1 Knapsack","date":"2020-06-26T00:00:00.000Z","categories":["Dynamic Programming"],"extract":"Detailed look at 0-1 Knapsack","thumbnail":"/post-images/knapsack.png","tags":["Dynamic programming"]},"fields":{"slug":"/0-1-knapsack","date":"June 26, 2020"}}},"pageContext":{"slug":"/0-1-knapsack","nexttitle":"More Recursion","nextslug":"/more-recursion","prevtitle":"Unbounded Knapsack","prevslug":"/unbounded-knapsack"}}}