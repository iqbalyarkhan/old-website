{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/graph-ql-notes",
    "result": {"data":{"markdownRemark":{"html":"<ul>\n<li><a href=\"#introduction\">Introduction</a>\n<ul>\n<li><a href=\"#graphql-and-github\">GraphQL and Github</a></li>\n</ul>\n</li>\n<li><a href=\"#query\">Query</a>\n<ul>\n<li><a href=\"#fragments\">Fragments</a></li>\n<li><a href=\"#variables\">Variables</a></li>\n<li><a href=\"#default-variables\">Default Variables</a></li>\n<li><a href=\"#named-queries\">Named Queries</a></li>\n<li><a href=\"#nested-objects\">Nested Objects</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n</ul>\n</li>\n<li><a href=\"#mutations\">Mutations</a></li>\n<li><a href=\"#pagination\">Pagination</a></li>\n<li><a href=\"#schema\">Schema</a>\n<ul>\n<li><a href=\"#scalar-types\">Scalar Types</a></li>\n<li><a href=\"#object-types\">Object Types</a></li>\n<li><a href=\"#enum-types\">Enum Types</a></li>\n<li><a href=\"#union-types\">Union Types</a></li>\n<li><a href=\"#interface-types\">Interface Types</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"introduction\" style=\"position:relative;\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h2>\n<p>GraphQL is a query language and server-side runtime for APIs that prioritizes giving clients exactly the data they request and no more. GraphQL is designed to make APIs fast, flexible, and developer-friendly. It can even be deployed within an IDE known as GraphiQL. As an alternative to REST, GraphQL lets developers construct requests that pull data from multiple data sources in a single API call.</p>\n<h3 id=\"graphql-and-github\" style=\"position:relative;\"><a href=\"#graphql-and-github\" aria-label=\"graphql and github permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GraphQL and Github</h3>\n<p>To get started, let's use Github's GraphQL API for which you need to generate a personal access token. The access token allows you to read and write data with your username.</p>\n<p>There are two common ways to interact with the GitHub GraphQL API:</p>\n<ul>\n<li>First, you can use <a href=\"https://docs.github.com/en/graphql/overview/explorer\">GitHub’s GraphQL Explorer</a>. You only need to sign up with your GitHub account to run GraphQL queries. This is what we'll be using.</li>\n<li>Second, you can use a generic client called <code class=\"language-cpptext\">GraphiQL</code>. It allows you to run GraphQL queries against your github account using the token you generated.</li>\n</ul>\n<h2 id=\"query\" style=\"position:relative;\"><a href=\"#query\" aria-label=\"query permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Query</h2>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token comment\">#keyword</span>\n<span class=\"token keyword\">query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">#object</span>\n  <span class=\"token object\">viewer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">#field1</span>\n    <span class=\"token property\">login</span>\n    <span class=\"token comment\">#field2</span>\n    <span class=\"token property\">url</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-cppjson\"><code class=\"language-cppjson\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"viewer\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"login\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"iqbalyarkhan\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://github.com/iqbalyarkhan\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"avatarUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://xyz.com/u/123\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Example above starts with keyword <code class=\"language-cpptext\">query</code>. This is similar to <code class=\"language-cpptext\">select</code> statement in SQL. Inside the query, we provider the <code class=\"language-cpptext\">viewer</code> object that can be used to request data about the currently authorized user. Since you are authorized by your personal access token, it should show data about your account.</p>\n<p>The viewer is an <code class=\"language-cpptext\">object</code> in GraphQL terms. Objects hold data about an entity.</p>\n<p>This data is accessed using a so-called <code class=\"language-cpptext\">field</code> in GraphQL. Fields are used to ask for specific <code class=\"language-cpptext\">properties</code> in objects. For instance, the viewer object exposes a wide range of fields. Two fields for the object–name and url–were used in the query.</p>\n<p>To specify a GitHub organization, you can pass an <code class=\"language-cpptext\">argument</code> to fields. In the example below, I've provided <code class=\"language-cpptext\">login</code> as an argument:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token keyword\">query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property-query\">organization</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">login</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"SMUCSEG2Consulting\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">name</span>\n    <span class=\"token property\">descriptionHTML</span>\n    <span class=\"token property\">url</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-cppjson\"><code class=\"language-cppjson\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"organization\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SMUCSEG2Consulting\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"descriptionHTML\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;div>&lt;/div>\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://github.com/SMUCSEG2Consulting\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>What if you're part of 2 organizations? Simply add 2 queries right?</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token keyword\">query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property-query\">organization</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">login</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"SMUCSEG2Consulting\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">name</span>\n    <span class=\"token property\">descriptionHTML</span>\n    <span class=\"token property\">url</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token property-query\">organization</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">login</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"SMUCSE2341\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">name</span>\n    <span class=\"token property\">descriptionHTML</span>\n    <span class=\"token property\">url</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>output: You’d see an error such as <code class=\"language-cpptext\">Field 'organization' has an argument conflict</code>.</p>\n<p>That's because you're requesting 2 objects with the same structure. If you ever wanted to request data about two identical objects, you would have to use <code class=\"language-cpptext\">aliases</code> because GraphQL wouldn’t know how to resolve the two organization objects in a result. Here's how you'd do it. (Note the use of <code class=\"language-cpptext\">consulting</code> and <code class=\"language-cpptext\">teaching</code> as aliases):</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token keyword\">query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">consulting</span><span class=\"token punctuation\">:</span> <span class=\"token property-query\">organization</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">login</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"SMUCSEG2Consulting\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">name</span>\n    <span class=\"token property\">descriptionHTML</span>\n    <span class=\"token property\">url</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token attr-name\">teaching</span><span class=\"token punctuation\">:</span> <span class=\"token property-query\">organization</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">login</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"SMUCSE2341\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">name</span>\n    <span class=\"token property\">descriptionHTML</span>\n    <span class=\"token property\">url</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-cppjson\"><code class=\"language-cppjson\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"consulting\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SMUCSEG2Consulting\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"descriptionHTML\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;div>&lt;/div>\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://github.com/SMUCSEG2Consulting\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"teaching\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CS 2341 - Data Structures\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"descriptionHTML\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;div>Github Org for SMU's Data Structures Class&lt;/div>\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://github.com/SMUCSE2341\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"fragments\" style=\"position:relative;\"><a href=\"#fragments\" aria-label=\"fragments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fragments</h3>\n<p>Note how we repeated the same fields(name, descriptionHTML and url) over and over in the query above:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token keyword\">query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">consulting</span><span class=\"token punctuation\">:</span> <span class=\"token property-query\">organization</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">login</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"SMUCSEG2Consulting\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">name</span>\n    <span class=\"token property\">descriptionHTML</span>\n    <span class=\"token property\">url</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token attr-name\">teaching</span><span class=\"token punctuation\">:</span> <span class=\"token property-query\">organization</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">login</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"SMUCSE2341\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">name</span>\n    <span class=\"token property\">descriptionHTML</span>\n    <span class=\"token property\">url</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We can extract commonly used fields into something called a <code class=\"language-cpptext\">fragment</code>. Fragment specifies 2 pieces of information:</p>\n<ul>\n<li>What fields should form the query</li>\n<li>What type of object can the fragment be used on</li>\n</ul>\n<p>Here's how you define a fragment</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token keyword\">fragment</span> <span class=\"token fragment function\">nameOfFragment</span> <span class=\"token keyword\">on</span> <span class=\"token object\">nameOfObject</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">field1</span>\n  <span class=\"token property\">field2</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now converting our 3 fields into a fragment we get:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token keyword\">fragment</span> <span class=\"token fragment function\">sharedOrgFields</span> <span class=\"token keyword\">on</span> <span class=\"token class-name\">Organization</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">name</span>\n  <span class=\"token property\">descriptionHTML</span>\n  <span class=\"token property\">url</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We can now change our query to:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token keyword\">query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">consulting</span><span class=\"token punctuation\">:</span> <span class=\"token property-query\">organization</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">login</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"SMUCSEG2Consulting\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span><span class=\"token fragment function\">sharedOrgFields</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token attr-name\">teaching</span><span class=\"token punctuation\">:</span> <span class=\"token property-query\">organization</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">login</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"SMUCSE2341\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span><span class=\"token fragment function\">sharedOrgFields</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fragment</span> <span class=\"token fragment function\">sharedOrgFields</span> <span class=\"token keyword\">on</span> <span class=\"token class-name\">Organization</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">name</span>\n  <span class=\"token property\">descriptionHTML</span>\n  <span class=\"token property\">url</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"variables\" style=\"position:relative;\"><a href=\"#variables\" aria-label=\"variables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Variables</h3>\n<p>In the previous queries, you provided arguments that identified an organization to your fields; but you <strong>inlined</strong> these arguments in your query. Think about a query like a function, where it’s important to provide dynamic arguments to it. That’s where the <code class=\"language-cpptext\">variable</code> in GraphQL comes in: it allows arguments to be extracted as variables from queries. Here’s how an organization’s login argument can be extracted to a dynamic variable (let's use a single organization for now):</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token keyword\">query</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$organization</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>We've provided name of the variable, <code class=\"language-cpptext\">organization</code>, to our query via the <code class=\"language-cpptext\">$</code> sign. We're also providing the <strong>type</strong> of variable which is <code class=\"language-cpptext\">String</code>. Exclamation point <code class=\"language-cpptext\">!</code> means that the argument is required.</p>\n<p>Here's the previous example in its entirety using variables (I removed the alias since there's only 1 org now):</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token keyword\">query</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$organization</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property-query\">organization</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">login</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$organization</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span><span class=\"token fragment function\">sharedOrgFields</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fragment</span> <span class=\"token fragment function\">sharedOrgFields</span> <span class=\"token keyword\">on</span> <span class=\"token class-name\">Organization</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">name</span>\n  <span class=\"token property\">descriptionHTML</span>\n  <span class=\"token property\">url</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To pass in the variables, you'd do so in the query variables section:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-cppjson\"><code class=\"language-cppjson\"><span class=\"token punctuation\">{</span> <span class=\"token property\">\"organization\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SMUCSE2341\"</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"default-variables\" style=\"position:relative;\"><a href=\"#default-variables\" aria-label=\"default variables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Default Variables</h3>\n<p>What if you have a field that can be provided in some cases and omitted in others? You can use a default variable. To do so, simply make the variable non-required (by removing exclamation) and provide a default value:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token keyword\">query</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$organization</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"SMUCSE2341\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property-query\">organization</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">login</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$organization</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span><span class=\"token fragment function\">sharedOrgFields</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fragment</span> <span class=\"token fragment function\">sharedOrgFields</span> <span class=\"token keyword\">on</span> <span class=\"token class-name\">Organization</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">name</span>\n  <span class=\"token property\">descriptionHTML</span>\n  <span class=\"token property\">url</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"named-queries\" style=\"position:relative;\"><a href=\"#named-queries\" aria-label=\"named queries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Named Queries</h3>\n<p>What if you had multiple queries? To keep things clean, we can also name our queries:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token keyword\">query</span> <span class=\"token definition-query function\">getOrgInfo</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$organization</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"SMUSCE2341\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property-query\">organization</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">login</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$organization</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span><span class=\"token fragment function\">sharedOrgFields</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fragment</span> <span class=\"token fragment function\">sharedOrgFields</span> <span class=\"token keyword\">on</span> <span class=\"token class-name\">Organization</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">name</span>\n  <span class=\"token property\">descriptionHTML</span>\n  <span class=\"token property\">url</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"nested-objects\" style=\"position:relative;\"><a href=\"#nested-objects\" aria-label=\"nested objects permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nested Objects</h3>\n<p>So far we've only looked at organization info. Let's find out the repos owned by an org. An org has another field called <code class=\"language-cpptext\">repository</code> that can disply info of the repo name passed in.</p>\n<p>Let's pass in the repo's name dynamically. Let's remove the default args and make org name and repo name required:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token keyword\">query</span> <span class=\"token definition-query function\">getOrgInfo</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$organization</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span><span class=\"token operator\">!</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$repository</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property-query\">organization</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">login</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$organization</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span><span class=\"token fragment function\">sharedOrgFields</span>\n    <span class=\"token property-query\">repository</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$repository</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">name</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fragment</span> <span class=\"token fragment function\">sharedOrgFields</span> <span class=\"token keyword\">on</span> <span class=\"token class-name\">Organization</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">name</span>\n  <span class=\"token property\">descriptionHTML</span>\n  <span class=\"token property\">url</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>with the following query variables:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-cppjson\"><code class=\"language-cppjson\"><span class=\"token punctuation\">{</span> <span class=\"token property\">\"organization\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SMUCSE2341\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"repository\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Sprint4Headers\"</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>will return this:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-cppjson\"><code class=\"language-cppjson\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"organization\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CS 2341 - Data Structures\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"descriptionHTML\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;div>Github Org for SMU's Data Structures Class&lt;/div>\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://github.com/SMUCSE2341\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"repository\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Sprint4Headers\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"directives\" style=\"position:relative;\"><a href=\"#directives\" aria-label=\"directives permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Directives</h3>\n<p>A directive decorates part of a GraphQL schema or operation with additional configuration. Tools like Apollo Server (and Apollo Client) can read a GraphQL document's directives and perform custom logic as appropriate.</p>\n<p>Directives are preceded by the @ character, like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ExampleType</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">oldField</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span> <span class=\"token directive function\">@deprecated</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">reason</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Use `newField`.\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token attr-name\">newField</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This example shows the <code class=\"language-cpptext\">@deprecated</code> directive, which is a default directive (i.e., it's part of the GraphQL specification). It demonstrates the following about directives:</p>\n<ul>\n<li>Directives can take arguments of their own (reason in this case).</li>\n<li>Directives appear after the declaration of what they decorate (the <code class=\"language-cpptext\">oldField</code> field in this case)</li>\n</ul>\n<p>Let's use this directive concept with our repository. We'll pass a directive called <code class=\"language-cpptext\">withFork</code> that'll determine if we want to get the <code class=\"language-cpptext\">forkCount</code> for a particular repo. If it's true, we'll display this count, otherwise we won't.</p>\n<p>This line determines this logic inside the <code class=\"language-cpptext\">repository</code> object:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token property\">forkCount</span> <span class=\"token directive function\">@include</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">if</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$withFork</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>An example:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token keyword\">query</span> <span class=\"token definition-query function\">getOrganizationInfo</span><span class=\"token punctuation\">(</span>\n  <span class=\"token variable\">$organization</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span><span class=\"token operator\">!</span>\n  <span class=\"token variable\">$repository</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span><span class=\"token operator\">!</span>\n  <span class=\"token variable\">$withFork</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">Boolean</span><span class=\"token operator\">!</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property-query\">organization</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">login</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$organization</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">name</span>\n    <span class=\"token property\">url</span>\n    <span class=\"token property\">descriptionHTML</span>\n    <span class=\"token property-query\">repository</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$repository</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">name</span>\n      <span class=\"token property\">forkCount</span> <span class=\"token directive function\">@include</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">if</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$withFork</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here're the variables we provide to our query:</p>\n<p>with the following query variables:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-cppjson\"><code class=\"language-cppjson\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"organization\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SMUCSE2341\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"repository\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Sprint4Headers\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"withFork\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Output:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-cppjson\"><code class=\"language-cppjson\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"organization\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CS 2341 - Data Structures\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://github.com/SMUCSE2341\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"descriptionHTML\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;div>Github Org for SMU's Data Structures Class&lt;/div>\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"repository\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Sprint4Headers\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"forkCount\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"mutations\" style=\"position:relative;\"><a href=\"#mutations\" aria-label=\"mutations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mutations</h2>\n<p>Lets talk about <code class=\"language-cpptext\">mutation</code>: unlike <code class=\"language-cpptext\">query</code>, a <code class=\"language-cpptext\">mutation</code> is used for writing data instead of reading it. The <code class=\"language-cpptext\">mutation</code> shares the same principles as the <code class=\"language-cpptext\">query</code>: it has <code class=\"language-cpptext\">fields</code> and <code class=\"language-cpptext\">objects</code>, <code class=\"language-cpptext\">arguments</code> and <code class=\"language-cpptext\">variables</code>, <code class=\"language-cpptext\">fragments</code> and operation names, as well as directives and nested objects for the returned result. With mutations you can specify data as fields and objects that should be returned after it \"mutates\" into something acceptable.</p>\n<p>Let's check out the documentation for <code class=\"language-cpptext\">addStar</code> mutation:</p>\n<p>As arguments it accepts <code class=\"language-cpptext\">AddStarInput!</code>. <code class=\"language-cpptext\">AddStarInput</code> needs these as input:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token comment\">#Required  Starrable ID to star.</span>\n<span class=\"token attr-name\">starrableId</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">ID</span><span class=\"token operator\">!</span>\n\n<span class=\"token comment\">#Optional unique identifier for the client performing the mutation.</span>\n<span class=\"token attr-name\">clientMutationId</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span></code></pre></div>\n<p>This means you need to have the <code class=\"language-cpptext\">starrableId</code> of the repo that you want to star. To do so, I need to query one such repo:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token keyword\">query</span> <span class=\"token definition-query function\">getRepoId</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property-query\">organization</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">login</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"the-road-to-learn-react\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">name</span>\n    <span class=\"token property\">url</span>\n    <span class=\"token property-query\">repository</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"the-road-to-learn-react\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">id</span>\n      <span class=\"token property\">name</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-cppjson\"><code class=\"language-cppjson\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"organization\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"The Road to React\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://github.com/the-road-to-learn-react\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"repository\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"MDEwOlJlcG9zaXRvcnk2MzM1MjkwNw==\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"the-road-to-learn-react\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We'll now use the returned ID to create a mutation to like this repo:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token keyword\">mutation</span> <span class=\"token definition-mutation function\">starRepoWithID</span><span class=\"token punctuation\">(</span><span class=\"token variable variable-input\">$repoID</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">ID</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property-query property-mutation\">addStar</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">input</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token attr-name\">starrableId</span><span class=\"token punctuation\">:</span> <span class=\"token variable variable-input\">$repoID</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token object\">starrable</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">id</span>\n      <span class=\"token property\">viewerHasStarred</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the mutation above, we have defined return fields as the <code class=\"language-cpptext\">starrable</code> object. We provide this as our query variables:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-cppjson\"><code class=\"language-cppjson\"><span class=\"token punctuation\">{</span> <span class=\"token property\">\"repoID\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"MDEwOlJlcG9zaXRvcnk2MzM1MjkwNw==\"</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-cppjson\"><code class=\"language-cppjson\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"addStar\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"starrable\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"MDEwOlJlcG9zaXRvcnk2MzM1MjkwNw==\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"viewerHasStarred\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To un-star, we'll do this:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token keyword\">mutation</span> <span class=\"token definition-mutation function\">unStarRepoWithID</span><span class=\"token punctuation\">(</span><span class=\"token variable variable-input\">$repoID</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">ID</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property-query property-mutation\">removeStar</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">input</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token attr-name\">starrableId</span><span class=\"token punctuation\">:</span> <span class=\"token variable variable-input\">$repoID</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token object\">starrable</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">viewerHasStarred</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-cppjson\"><code class=\"language-cppjson\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"removeStar\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"starrable\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"viewerHasStarred\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"pagination\" style=\"position:relative;\"><a href=\"#pagination\" aria-label=\"pagination permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pagination</h2>\n<p>Imagine you have a list of repositories in your GitHub organization, but you only want to retrieve a few of them to display in your UI. It could take ages to fetch a list of repositories from a large organization. In GraphQL, you can request paginated data by providing arguments to a list field that says how many items you are expecting from the list:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token keyword\">query</span> <span class=\"token definition-query function\">OrganizationForLearningReact</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property-query\">organization</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">login</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"the-road-to-learn-react\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">name</span>\n    <span class=\"token property\">url</span>\n    <span class=\"token property-query\">repositories</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">first</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token object\">edges</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token object\">node</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">name</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-cpptext\">first</code> argument is passed to the <code class=\"language-cpptext\">repositories</code> list field that specifies how many items from the list are expected in the result. The query shape doesn’t need to follow the <code class=\"language-cpptext\">edges</code> and <code class=\"language-cpptext\">node</code> structure, but it’s one of a few solutions to define paginated data structures and lists with GraphQL.</p>\n<p>We still need to figure out how to fetch the next two repositories in the list, however. The first result of the query is the first page of the paginated list, the second query result should be the second page.</p>\n<p>Each edge comes with its own cursor field to identify its position in the list:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token keyword\">query</span> <span class=\"token definition-query function\">OrganizationForLearningReact</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property-query\">organization</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">login</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"the-road-to-learn-react\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">name</span>\n    <span class=\"token property\">url</span>\n    <span class=\"token property-query\">repositories</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">first</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token object\">edges</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token object\">node</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">name</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token property\">cursor</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-cppjson\"><code class=\"language-cppjson\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"organization\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"The Road to React\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://github.com/the-road-to-learn-react\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"repositories\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"edges\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"node\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"the-road-to-learn-react\"</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"cursor\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Y3Vyc29yOnYyOpHOA8awSw==\"</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"node\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hackernews-client\"</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"cursor\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Y3Vyc29yOnYyOpHOBGhimw==\"</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, you can use the cursor of the first repository in the list to execute a second query. By using the after argument for the repositories list field, you can specify an entry point to retrieve your next page of paginated data:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token keyword\">query</span> <span class=\"token definition-query function\">OrganizationForLearningReact</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property-query\">organization</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">login</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"the-road-to-learn-react\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">name</span>\n    <span class=\"token property\">url</span>\n    <span class=\"token property-query\">repositories</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">first</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">after</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Y3Vyc29yOnYyOpHOA8awSw==\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token object\">edges</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token object\">node</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">name</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token property\">cursor</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the previous result, the second item is retrieved, as well as a new third item. The first item isn’t retrieved because you have used its cursor as after argument to retrieve all items after it.</p>\n<h2 id=\"schema\" style=\"position:relative;\"><a href=\"#schema\" aria-label=\"schema permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Schema</h2>\n<p>So far we've been using a schema that's already defined. It is the schema exporsed by Github. We'll now see how to create our own schema. Your GraphQL server uses a schema to describe the shape of your available data. This schema defines a hierarchy of types with fields that are populated from your back-end data stores. The schema also specifies exactly which queries and mutations are available for clients to execute.</p>\n<p>The GraphQL specification defines a human-readable schema definition language (or SDL) that you use to define your schema and store it as a string.</p>\n<p>Here's a short example schema that defines two object types: <code class=\"language-cpptext\">Book</code> and <code class=\"language-cpptext\">Author</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">title</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n  <span class=\"token attr-name\">author</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Author</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Author</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n  <span class=\"token attr-name\">books</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A schema defines a collection of types and the relationships between those types. In the example schema above, a <code class=\"language-cpptext\">Book</code> can have an associated <code class=\"language-cpptext\">author</code>, and an <code class=\"language-cpptext\">Author</code> can have a list of <code class=\"language-cpptext\">book</code>s. Note that the schema is not responsible for defining where data comes from or how it's stored. It is entirely implementation-agnostic.</p>\n<p>Most of the schema types you define have one or more fields:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token comment\"># This Book type has two fields: title and author</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">title</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span> <span class=\"token comment\"># returns a String</span>\n  <span class=\"token attr-name\">author</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Author</span> <span class=\"token comment\"># returns an Author</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Each field returns data of the type specified. A field's return type can be a <code class=\"language-cpptext\">scalar</code>, <code class=\"language-cpptext\">object</code>, <code class=\"language-cpptext\">enum</code>, <code class=\"language-cpptext\">union</code>, or <code class=\"language-cpptext\">interface</code>. Let's look at each one:</p>\n<h3 id=\"scalar-types\" style=\"position:relative;\"><a href=\"#scalar-types\" aria-label=\"scalar types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scalar Types</h3>\n<p>Scalar types are similar to primitive types in your favorite programming language. They always resolve to concrete data.</p>\n<p>GraphQL's default scalar types are:</p>\n<ul>\n<li>Int: A signed 32‐bit integer</li>\n<li>Float: A signed double-precision floating-point value</li>\n<li>String: A UTF‐8 character sequence</li>\n<li>Boolean: true or false</li>\n<li>ID (serialized as a String): A unique identifier that's often used to refetch an object or as the key for a cache.</li>\n</ul>\n<p>Although it's serialized as a String, an ID is not intended to be human‐readable. These primitive types cover the majority of use cases.</p>\n<h3 id=\"object-types\" style=\"position:relative;\"><a href=\"#object-types\" aria-label=\"object types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object Types</h3>\n<p>Most of the types you define in a GraphQL schema are object types. An object type contains a collection of fields, each of which has its own type.</p>\n<p>Two object types can include each other as fields, as is the case in our example schema from earlier:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">title</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n  <span class=\"token attr-name\">author</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Author</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Author</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n  <span class=\"token attr-name\">books</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"enum-types\" style=\"position:relative;\"><a href=\"#enum-types\" aria-label=\"enum types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enum Types</h3>\n<p>An enum is similar to a scalar type, but its legal values are defined in the schema. Here's an example definition:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\">\n```<span class=\"token keyword\">enum</span> <span class=\"token class-name\">AllowedColor</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">RED</span>\n  <span class=\"token constant\">GREEN</span>\n  <span class=\"token constant\">BLUE</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>An enum can appear anywhere a scalar is valid (including as a field argument), because they serialize as strings:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">favoriteColor</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">AllowedColor</span> <span class=\"token comment\"># enum return value</span>\n  <span class=\"token attr-name\">avatar</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">borderColor</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">AllowedColor</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span> <span class=\"token comment\"># enum argument</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A query might then look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token keyword\">query</span> <span class=\"token definition-query function\">GetAvatar</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property-query\">avatar</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">borderColor</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">RED</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"union-types\" style=\"position:relative;\"><a href=\"#union-types\" aria-label=\"union types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Union Types</h3>\n<p>When you define a union type, you declare which object types are included in the union:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token keyword\">union</span> <span class=\"token class-name\">Media</span> <span class=\"token operator\">=</span> <span class=\"token property\">Book</span> <span class=\"token operator\">|</span> <span class=\"token property\">Movie</span></code></pre></div>\n<p>A field can have a union (or a list of that union) as its return type. In this case, it can return any object type that's included in the union:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">allMedia</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Media</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># This list can include both Book and Movie objects</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>All of a union's included types must be object types (not scalars, input types, etc.). Included types do not need to share any fields. The following schema defines a <code class=\"language-cpptext\">SearchResult</code> union type that can return either a <code class=\"language-cpptext\">Book</code> or an <code class=\"language-cpptext\">Author</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token keyword\">union</span> <span class=\"token class-name\">SearchResult</span> <span class=\"token operator\">=</span> <span class=\"token property\">Book</span> <span class=\"token operator\">|</span> <span class=\"token property\">Author</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">title</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span><span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Author</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span><span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">search</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">contains</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">SearchResult</span><span class=\"token operator\">!</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>GraphQL clients don't know which object type a field will return if the field's return type is a union. To account for this, a query can include the subfields of multiple possible types.</p>\n<p>Here's a valid query for the schema above:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token keyword\">query</span> <span class=\"token definition-query function\">GetSearchResults</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property-query\">search</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">contains</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Shakespeare\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\"># Querying for __typename is almost always recommended,</span>\n    <span class=\"token comment\"># but it's even more important when querying a field that</span>\n    <span class=\"token comment\"># might return one of multiple types.</span>\n    <span class=\"token property\">__typename</span>\n    <span class=\"token operator\">...</span> <span class=\"token keyword\">on</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">title</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">...</span> <span class=\"token keyword\">on</span> <span class=\"token class-name\">Author</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">name</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Every object type in your schema automatically has a field named <code class=\"language-cpptext\">__typename</code> (you don't need to define it). The <code class=\"language-cpptext\">__typename</code> field returns the object type's name as a String (e.g., Book or Author).</p>\n<p>GraphQL clients use an object's <code class=\"language-cpptext\">__typename</code> for many purposes, such as to determine which type was returned by a field that can return multiple types (i.e., a union or interface). Apollo Client relies on <code class=\"language-cpptext\">__typename</code> when caching results, so it automatically includes <code class=\"language-cpptext\">__typename</code> in every object of every query.</p>\n<p>This query uses inline fragments to fetch a <code class=\"language-cpptext\">Result</code>'s title (if it's a <code class=\"language-cpptext\">Book</code>) or its name (if it's an <code class=\"language-cpptext\">Author</code>).</p>\n<p>To fully resolve a union, Apollo Server needs to specify which of the union's types is being returned. To achieve this, you define a <code class=\"language-cpptext\">__resolveType</code> function for the union in your resolver map.</p>\n<p>The <code class=\"language-cpptext\">__resolveType</code> function is responsible for determining an object's corresponding GraphQL type and returning the name of that type as a string. It can use any logic to do so, such as:</p>\n<p>Checking for the presence or absence of fields that are unique to a particular type in the union\nUsing instanceof, if the JavaScript object's type is related to its GraphQL object type\nHere's a basic <code class=\"language-cpptext\">__resolveType</code> function for the SearchResult union defined above:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token property\">const</span> <span class=\"token property\">resolvers</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">SearchResult</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property-query\">__resolveType</span><span class=\"token punctuation\">(</span><span class=\"token property\">obj</span><span class=\"token punctuation\">,</span> <span class=\"token property\">context</span><span class=\"token punctuation\">,</span> <span class=\"token property\">info</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      // <span class=\"token property\">Only</span> <span class=\"token property\">Author</span> <span class=\"token property\">has</span> <span class=\"token property\">a</span> <span class=\"token property\">name</span> <span class=\"token property\">field</span>\n      <span class=\"token property-query\">if</span><span class=\"token punctuation\">(</span><span class=\"token property\">obj</span>.<span class=\"token property\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">return</span> '<span class=\"token property\">Author</span>';\n      <span class=\"token punctuation\">}</span>\n      // <span class=\"token property\">Only</span> <span class=\"token property\">Book</span> <span class=\"token property\">has</span> <span class=\"token property\">a</span> <span class=\"token property\">title</span> <span class=\"token property\">field</span>\n      <span class=\"token property-query\">if</span><span class=\"token punctuation\">(</span><span class=\"token property\">obj</span>.<span class=\"token property\">title</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">return</span> '<span class=\"token property\">Book</span>';\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token property\">return</span> <span class=\"token property\">null</span>; // <span class=\"token property\">GraphQLError</span> <span class=\"token property\">is</span> <span class=\"token property\">thrown</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">Query</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attr-name\">search</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>;\n\n<span class=\"token property\">const</span> <span class=\"token property\">server</span> <span class=\"token operator\">=</span> <span class=\"token property\">new</span> <span class=\"token property-query\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">typeDefs</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">resolvers</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>;\n\n<span class=\"token property\">server</span>.<span class=\"token property-query\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.<span class=\"token property-query\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token property\">url</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">console</span>.<span class=\"token property-query\">log</span><span class=\"token punctuation\">(</span>`🚀 <span class=\"token property\">Server</span> <span class=\"token property\">ready</span> <span class=\"token property\">at</span> $<span class=\"token punctuation\">{</span><span class=\"token property\">url</span><span class=\"token punctuation\">}</span>`<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>;</code></pre></div>\n<p>If a <code class=\"language-cpptext\">__resolveType</code> function returns any value that isn't the name of a valid type, the associated operation produces a GraphQL error.</p>\n<h3 id=\"interface-types\" style=\"position:relative;\"><a href=\"#interface-types\" aria-label=\"interface types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interface Types</h3>\n<p>An interface specifies a set of fields that multiple object types can include:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">title</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">author</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Author</span><span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If an object type <code class=\"language-cpptext\">implements</code> an interface, it must include all of that interface's fields:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Textbook</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">title</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span><span class=\"token operator\">!</span> <span class=\"token comment\"># Must be present</span>\n  <span class=\"token attr-name\">author</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Author</span><span class=\"token operator\">!</span> <span class=\"token comment\"># Must be present</span>\n  <span class=\"token attr-name\">courses</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Course</span><span class=\"token operator\">!</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The following schema defines a Book interface, along with two object types that implement it:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">title</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">author</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Author</span><span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Textbook</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">title</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">author</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Author</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">courses</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Course</span><span class=\"token operator\">!</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ColoringBook</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">title</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">author</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Author</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">colors</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token scalar\">String</span><span class=\"token operator\">!</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">books</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Book</span><span class=\"token operator\">!</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this schema, Query.books returns a list that can include both Textbooks and ColoringBooks. If a field's return type is an interface, clients can query that field for any subfields included in the interface:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token keyword\">query</span> <span class=\"token definition-query function\">GetBooks</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token object\">books</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">title</span>\n    <span class=\"token property\">author</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Clients can also query for subfields that aren't included in the interface:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token keyword\">query</span> <span class=\"token definition-query function\">GetBooks</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token object\">books</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\"># Querying for __typename is almost always recommended,</span>\n    <span class=\"token comment\"># but it's even more important when querying a field that</span>\n    <span class=\"token comment\"># might return one of multiple types.</span>\n    <span class=\"token property\">__typename</span>\n    <span class=\"token property\">title</span>\n    <span class=\"token operator\">...</span> <span class=\"token keyword\">on</span> <span class=\"token class-name\">Textbook</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token object\">courses</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\"># Only present in Textbook</span>\n        <span class=\"token property\">name</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">...</span> <span class=\"token keyword\">on</span> <span class=\"token class-name\">ColoringBook</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">colors</span> <span class=\"token comment\"># Only present in ColoringBook</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As with union types, Apollo Server requires interfaces to define a __resolveType function to determine which implementing object type is being returned.</p>\n<p>Here's an example __resolveType function for the Book interface defined above:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-cppgraphql\"><code class=\"language-cppgraphql\"><span class=\"token property\">const</span> <span class=\"token property\">resolvers</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">Book</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property-query\">__resolveType</span><span class=\"token punctuation\">(</span><span class=\"token property\">book</span><span class=\"token punctuation\">,</span> <span class=\"token property\">context</span><span class=\"token punctuation\">,</span> <span class=\"token property\">info</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      // <span class=\"token property\">Only</span> <span class=\"token property\">Textbook</span> <span class=\"token property\">has</span> <span class=\"token property\">a</span> <span class=\"token property\">courses</span> <span class=\"token property\">field</span>\n      <span class=\"token property-query\">if</span><span class=\"token punctuation\">(</span><span class=\"token property\">book</span>.<span class=\"token property\">courses</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">return</span> '<span class=\"token property\">Textbook</span>';\n      <span class=\"token punctuation\">}</span>\n      // <span class=\"token property\">Only</span> <span class=\"token property\">ColoringBook</span> <span class=\"token property\">has</span> <span class=\"token property\">a</span> <span class=\"token property\">colors</span> <span class=\"token property\">field</span>\n      <span class=\"token property-query\">if</span><span class=\"token punctuation\">(</span><span class=\"token property\">book</span>.<span class=\"token property\">colors</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">return</span> '<span class=\"token property\">ColoringBook</span>';\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token property\">return</span> <span class=\"token property\">null</span>; // <span class=\"token property\">GraphQLError</span> <span class=\"token property\">is</span> <span class=\"token property\">thrown</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">Query</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attr-name\">books</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>;</code></pre></div>\n<p>For a complete project that utilizes Apollo Server to run queries against your schema, checkout this tutorial.</p>","timeToRead":16,"excerpt":"Introduction GraphQL and Github Query Fragments Variables Default Variables Named Queries Nested Objects Directives Mutations Pagination…","frontmatter":{"title":"GraphQL Notes","date":"2021-06-09T00:00:00.000Z","categories":["React"],"extract":"My notes as I learn GraphQL","thumbnail":"/post-images/graphql.png","tags":["blog","React"]},"fields":{"slug":"/graph-ql-notes","date":"June 09, 2021"}}},"pageContext":{"slug":"/graph-ql-notes","nexttitle":"ReactJS Notes","nextslug":"/react-js-notes","prevtitle":"Apollo Server Tutorial","prevslug":"/apollo-server-tutorial"}},
    "staticQueryHashes": ["3969716136"]}