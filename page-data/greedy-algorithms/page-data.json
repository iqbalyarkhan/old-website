{"componentChunkName":"component---src-templates-post-js","path":"/greedy-algorithms","result":{"data":{"markdownRemark":{"html":"<ol>\n<li><a href=\"#introduction\">Introduction</a></li>\n<li>\n<p><a href=\"#examples\">Examples</a></p>\n<ul>\n<li><a href=\"#max-water-between-vertical-lines\">Max water between vertical lines</a></li>\n<li><a href=\"#task-scheduler\">Task Scheduler</a></li>\n<li><a href=\"https://leetcode.com/problems/reorganize-string/\">Re-arrange string</a></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"introduction\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h3>\n<p>In this post, we'll discuss the greedy technique to solving various problems. Let's start with what it means to be greedy while designing an algorithm to solve a problem. A greedy algorithm is an algorithm that that computes a solution in steps and at each step this algorithm makes a <strong>locally optimum</strong> decision. Once that decision is made, the algorithm DOES NOT return to the step in question and undoes the decision.</p>\n<p>Let's see what greedy approach is all about:</p>\n<p><strong>Given a target change that needs to be made and possible coins, find the fewest number of coins needed to make that change</strong></p>\n<p>Say our target is $48 and possible coins are $30, $24, $12, $6 and $3. Greedy approach would make the locally optimum choice by picking the <strong>largest denomination</strong> available less than the change that needs to be made:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">target <span class=\"token number\">48</span>\npick<span class=\"token operator\">:</span> <span class=\"token number\">30</span>\n\ntarget<span class=\"token operator\">:</span> <span class=\"token number\">18</span>\npick <span class=\"token number\">12</span>\n\ntarget<span class=\"token operator\">:</span> <span class=\"token number\">6</span>\npick <span class=\"token number\">6</span>\n\ntotal of <span class=\"token number\">3</span> coins</code></pre></div>\n<p>It is clear that greedy approach won't work here since fewest coins are $24 and $24 (total of 2 coins). Having said that, there're problems where greedy approach DOES indeed result in a globally optimum solution. Let's have a look at a few such examples.</p>\n<h3 id=\"max-water-between-vertical-lines\"><a href=\"#max-water-between-vertical-lines\" aria-label=\"max water between vertical lines permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Max water between vertical lines</h3>\n<p><strong>An array of integers naturally defines a set of lines parallel to the Y-axis, starting from x = 0 as illustrated in Figure 18.4(a). The goal of this problem is to find the pair of lines that together with the X-axis \"trap\" the most water.</strong></p>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">            <span class=\"token operator\">|</span>       <span class=\"token operator\">|</span>               <span class=\"token operator\">|</span>\n    <span class=\"token operator\">|</span>       <span class=\"token operator\">|</span>       <span class=\"token operator\">|</span>       <span class=\"token operator\">|</span>       <span class=\"token operator\">|</span>       \n    <span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>\n    <span class=\"token number\">0</span>   <span class=\"token number\">1</span>   <span class=\"token number\">2</span>   <span class=\"token number\">3</span>   <span class=\"token number\">4</span>   <span class=\"token number\">5</span>   <span class=\"token number\">6</span>   <span class=\"token number\">7</span>   <span class=\"token number\">8</span>   <span class=\"token number\">9</span>   <span class=\"token number\">10</span>\n    i                                       j</code></pre></div>\n<p>The diagram above shows an example. Each vertical bar is the height and the X-axis shows the position of each line. The max area is when we choose the lines at 2,8 giving us a total area of (8-2) * 3 = 18. </p>\n<p>How do we go about solving this?</p>\n<p>Approach 1: First thing that comes to mind is that we can use 2 nested loops where we start at X = 0 and keep incrementing the ending line from 1 till 10. In the process we keep track of the max area. We then move to X = 1 and keep incrementing the ending line from 2 till 10. Once we're done, we would've looked at all possible combinations and in the process calculated our max. This approach obviously takes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> time. Let's see what other problem solving technique we can use to tackle this problem:</p>\n<p>Approach 2: Let's be greedy! We'll use 2 pointers: one at X = 0 (call this <code class=\"language-cpptext\">i</code>) and the other at X = 10 (call this <code class=\"language-cpptext\">j</code>). We'll initialize a max variable to minimum integer. Next, we calculate the area enclosed by the two lines we chose:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token keyword\">int</span> area <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span>j<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If this calculated area is greater than the current max, update the max and move on. This is where things get interesting. How do we <strong>move on</strong>? We're interested in the tallest and farthest lines to maximize our area. So, we'll move <code class=\"language-cpptext\">i</code> if height of <code class=\"language-cpptext\">i</code> is less than <code class=\"language-cpptext\">j</code> or we'll move <code class=\"language-cpptext\">j</code> if height of <code class=\"language-cpptext\">j</code> is less than <code class=\"language-cpptext\">i</code>. That is because we know that the smaller height line will not give us the max area. In the example above, 0's height is greater than 10's height, so we'll move <code class=\"language-cpptext\">j</code> inward:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">            <span class=\"token operator\">|</span>       <span class=\"token operator\">|</span>               <span class=\"token operator\">|</span>\n    <span class=\"token operator\">|</span>       <span class=\"token operator\">|</span>       <span class=\"token operator\">|</span>       <span class=\"token operator\">|</span>       <span class=\"token operator\">|</span>       \n    <span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>\n    <span class=\"token number\">0</span>   <span class=\"token number\">1</span>   <span class=\"token number\">2</span>   <span class=\"token number\">3</span>   <span class=\"token number\">4</span>   <span class=\"token number\">5</span>   <span class=\"token number\">6</span>   <span class=\"token number\">7</span>   <span class=\"token number\">8</span>   <span class=\"token number\">9</span>   <span class=\"token number\">10</span>\n    i                                   j</code></pre></div>\n<p>We then perform the following calculations:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">            <span class=\"token operator\">|</span>       <span class=\"token operator\">|</span>               <span class=\"token operator\">|</span>\n    <span class=\"token operator\">|</span>       <span class=\"token operator\">|</span>       <span class=\"token operator\">|</span>       <span class=\"token operator\">|</span>       <span class=\"token operator\">|</span>       \n    <span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>\n    <span class=\"token number\">0</span>   <span class=\"token number\">1</span>   <span class=\"token number\">2</span>   <span class=\"token number\">3</span>   <span class=\"token number\">4</span>   <span class=\"token number\">5</span>   <span class=\"token number\">6</span>   <span class=\"token number\">7</span>   <span class=\"token number\">8</span>   <span class=\"token number\">9</span>   <span class=\"token number\">10</span>\n    i                                   j\n\nmaxArea <span class=\"token operator\">=</span> <span class=\"token function\">max</span> <span class=\"token punctuation\">(</span>maxArea<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token operator\">-</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We continue to move inward until <code class=\"language-cpptext\">i == j</code>. At that point we would've found the max area. Here's the code for this approach:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">maxArea</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> maxArea <span class=\"token operator\">=</span> <span class=\"token class-name\">numeric_limits</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> currArea <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">-</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        maxArea <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxArea<span class=\"token punctuation\">,</span> currArea<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> A<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> maxArea<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// insert code here...</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> A <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token function\">maxArea</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Running time: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span></p>\n<h3 id=\"task-scheduler\"><a href=\"#task-scheduler\" aria-label=\"task scheduler permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Task Scheduler</h3>\n<p><strong><a href=\"https://leetcode.com/problems/task-scheduler/\">This</a> problem is defined as: Given a characters array tasks, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task is done in one unit of time. For each unit of time, the CPU could complete either one task or just be idle. However, there is a non-negative integer n that represents the cooldown period between two same tasks (the same letter in the array), that is that there must be at least n units of time between any two same tasks. Return the least number of units of times that the CPU will take to finish all the given tasks.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">n<span class=\"token operator\">=</span><span class=\"token number\">2</span> <span class=\"token operator\">and</span> tasks are<span class=\"token operator\">:</span>\nAAAAA\nBBB\nCC</code></pre></div>\n<p>n=2 means that between two similar characters, there need to be 2 other characters before we can pick the first character again. Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">allowed<span class=\"token operator\">:</span>\n B  A   C   B \n<span class=\"token operator\">not</span> allowed\n B  A   B   C  </code></pre></div>\n<p>How do we go about arranging our tasks so that we can reduce the total time? Let's pick randomly and process Bs first, then Cs and then As. </p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token comment\">//I represents idle state</span>\nBCIBCIBAIIAIIAIIAIIAIIA\nlength <span class=\"token operator\">=</span> <span class=\"token number\">23</span></code></pre></div>\n<p>That took too long! Notice how the As at the end wrecked our running time. That's because there're a lot of As so for each remaining A at the end, we have to count for the cool of period. That should give us a hint. What if we start with A, add some Bs in there and then process Cs?</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">ABCABCABIAIIA\nlength <span class=\"token operator\">=</span> <span class=\"token number\">13</span></code></pre></div>\n<p>Ok, so that was faster than our previous approaches. That's because we minimized the use of <code class=\"language-cpptext\">I</code> by knocking out tasks in decreasing order of frequency: ie A first (since A = 5), B next (since B = 3) and C last (since C = 2) as we cycle through the available characters. And as we process A, we can add next most frequent character for A's cool down period. For example, if we've processed all elements and only As are left, we'd have A LOT of idle states toward the end as shown earlier. This algorithm uses greedy approach since we're always going to process most frequently occurring tasks first.</p>\n<p>How would we go about converting this logic to code? Let's see the steps we have to perform:</p>\n<ul>\n<li>Create a max heap out of the characters provided. This would help us process characters that occur more frequently first. Every time you choose a character from this heap, decrement its count for future iterations</li>\n<li>\n<p>While there're elements on the heap to process:</p>\n<ul>\n<li>\n<p>Start at 0 and go up till cool down period. On each iteration:</p>\n<ul>\n<li>Remove a character from max heap, decrement its count and push to a temp storage</li>\n</ul>\n</li>\n<li>Insert characters from temp storage back in the heap if count for that character is not 0</li>\n</ul>\n</li>\n</ul>\n<p>Here's this logic converted to code:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">string <span class=\"token function\">leastInterval</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> tasks<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    priority_queue<span class=\"token operator\">&lt;</span>charCountPair<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>charCountPair<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> maxComp<span class=\"token operator\">></span> charHeap<span class=\"token punctuation\">;</span>\n    \n    charHeap<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    charHeap<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//    charHeap.push({'D',1});</span>\n    string ans <span class=\"token operator\">=</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>charHeap<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        vector<span class=\"token operator\">&lt;</span>charCountPair<span class=\"token operator\">></span> temp<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>charHeap<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> charHeap<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>second <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                ans <span class=\"token operator\">+=</span> <span class=\"token string\">'I'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n                temp<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>charHeap<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> charHeap<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>second <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                ans <span class=\"token operator\">+=</span> charHeap<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span>\n                cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n                charHeap<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">:</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>second <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                charHeap<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">int</span> lengthAns <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'I'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        lengthAns<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    \n    cout <span class=\"token operator\">&lt;&lt;</span> lengthAns <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    \n    \n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"re-arrange-string\"><a href=\"#re-arrange-string\" aria-label=\"re arrange string permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Re-arrange String</h3>\n<p><strong>Given a string S, check if the letters can be rearranged so that two characters that are adjacent to each other are not the same. If possible, output any possible result.  If not possible, return the empty string.</strong></p>\n<p>Let's see how we can re-arrange a specific string:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">given<span class=\"token operator\">:</span>       <span class=\"token string\">\"aaabbb\"</span>\nre<span class=\"token operator\">-</span>arranged<span class=\"token operator\">:</span> <span class=\"token string\">\"ababab\"</span>\n\nOR\n\ngiven<span class=\"token operator\">:</span>       <span class=\"token string\">\"aaaabcd\"</span>\nre<span class=\"token operator\">-</span>arranged<span class=\"token operator\">:</span> <span class=\"token string\">\"abacada\"</span>\nin<span class=\"token operator\">-</span>correct<span class=\"token operator\">:</span>  <span class=\"token string\">\"bcadaaa\"</span></code></pre></div>\n<p>The key insight from the above is that we need to somehow insert the more frequently occurring characters first and in-between, add those that occur less frequently. This is a greedy approach since we want to be done with the more frequent ones first. This problem is the same as the task scheduler where the only difference is that the cool down period for this question is 1! That's it!</p>\n<p>Therefore, we begin by defining the comparator and struct for our max heap:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token keyword\">typedef</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> charFreq<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">maxComp</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>\n        pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span>\n        pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Next, we'll create a hashtable with each character and its frequency and populate our maxHeap from the hash table. We'll then use a max heap with the most frequently occurring character at the top of our heap: </p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">string <span class=\"token function\">reorganizeString</span><span class=\"token punctuation\">(</span>string S<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> prevChar <span class=\"token operator\">=</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    string ans <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> h<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> S<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> h<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            h<span class=\"token punctuation\">[</span>S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            h<span class=\"token punctuation\">[</span>S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    priority_queue<span class=\"token operator\">&lt;</span>charFreq<span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span>charFreq<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> maxComp<span class=\"token operator\">></span> maxHeap<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>h<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> h<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            maxHeap<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">[</span>S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            h<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Next, we'll start our process of picking the most frequent character, adding to our string, picking the 2nd most frequent character and adding that to the string too. In the process we decrement the count of the two chosen characters and push back to the heap. We continue this process until we either encounter two consecutive characters or when there're no more items to process on the heap:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>maxHeap<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        vector<span class=\"token operator\">&lt;</span>charFreq<span class=\"token operator\">></span> temp<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxHeap<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">auto</span> curr <span class=\"token operator\">=</span> maxHeap<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            maxHeap<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">.</span>first <span class=\"token operator\">==</span> prevChar<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n            prevChar <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span>\n            ans <span class=\"token operator\">+=</span> curr<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span>\n            curr<span class=\"token punctuation\">.</span>second <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            temp<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">:</span> temp<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>second <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                maxHeap<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","timeToRead":8,"excerpt":"Introduction Examples Max water between vertical lines Task Scheduler Re-arrange string Introduction In this post, we'll discuss the greedy…","frontmatter":{"title":"Greedy Algorithms","date":"2020-08-16T00:00:00.000Z","categories":["General"],"extract":"A deep dive into greedy algorithms","thumbnail":"/post-images/greedy.png","tags":["Greedy Algorithms"]},"fields":{"slug":"/greedy-algorithms","date":"August 16, 2020"}}},"pageContext":{"slug":"/greedy-algorithms","nexttitle":"DP Discussion","nextslug":"/dp-discussion","prevtitle":"String Problems","prevslug":"/string-problems"}},"staticQueryHashes":["3969716136"]}