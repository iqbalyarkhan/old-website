{"componentChunkName":"component---src-templates-post-js","path":"/greedy-algorithms","result":{"data":{"markdownRemark":{"html":"<ol>\n<li><a href=\"#introduction\">Introduction</a></li>\n<li>\n<p><a href=\"#examples\">Examples</a></p>\n<ul>\n<li><a href=\"#coin-change\">Coin change</a></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"introduction\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h3>\n<p>In this post, we'll discuss the greedy technique to solving various problems. Let's start with what it means to be greedy while designing an algorithm to solve a problem. A greedy algorithm is an algorithm that that computes a solution in steps and at each step this algorithm makes a <strong>locally optimum</strong> decision. Once that decision is made, the algorithm DOES NOT return to the step in question and undoes the decision.</p>\n<p>Let's see what greedy approach is all about:</p>\n<p><strong>Given a target change that needs to be made and possible coins, find the fewest number of coins needed to make that change</strong></p>\n<p>Say our target is $48 and possible coins are $30, $24, $12, $6 and $3. Greedy approach would make the locally optimum approach by choosing the <strong>largest denomination</strong> available less than the change that needs to be made:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">target <span class=\"token number\">48</span>\npick<span class=\"token operator\">:</span> <span class=\"token number\">30</span>\n\ntarget<span class=\"token operator\">:</span> <span class=\"token number\">18</span>\npick <span class=\"token number\">12</span>\n\ntarget<span class=\"token operator\">:</span> <span class=\"token number\">6</span>\npick <span class=\"token number\">6</span>\n\ntotal of <span class=\"token number\">3</span> coins</code></pre></div>\n<p>It is clear that greedy approach won't work here since fewest coins are $24 and $24 (total of 2 coins). Having Said </p>","timeToRead":1,"excerpt":"Introduction Examples Coin change Introduction In this post, we'll discuss the greedy technique to solving various problems. Let's startâ€¦","frontmatter":{"title":"Greedy Algorithms","date":"2020-08-16T00:00:00.000Z","categories":["General"],"extract":"A deep dive into greedy algorithms","thumbnail":"/post-images/greedy.png","tags":["Greedy Algorithms"]},"fields":{"slug":"/greedy-algorithms","date":"August 16, 2020"}}},"pageContext":{"slug":"/greedy-algorithms","nexttitle":"Unbounded Knapsack","nextslug":"/unbounded-knapsack","prevtitle":"C++ Standard input","prevslug":"/c-standard-input"}}}