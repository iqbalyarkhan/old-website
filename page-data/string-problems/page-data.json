{"componentChunkName":"component---src-templates-post-js","path":"/string-problems","result":{"data":{"markdownRemark":{"html":"<ul>\n<li><a href=\"https://leetcode.com/problems/find-all-anagrams-in-a-string/\">All anagrams</a></li>\n</ul>\n<p><strong>Given a string s and a non-empty string p, find all the start indices of p's anagrams in s. Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100. The order of output does not matter.</strong></p>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">Input<span class=\"token operator\">:</span>\ns<span class=\"token operator\">:</span> <span class=\"token string\">\"cbaebabacd\"</span> p<span class=\"token operator\">:</span> <span class=\"token string\">\"abc\"</span>\n\nOutput<span class=\"token operator\">:</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>A naive approach would be to somehow keep track of number of characters in the pattern and start iterating over the text. On each iteration, keep a \"window\" size equal to the length of the pattern. Next, check to see if the frequency of characters in the text equal that of pattern. If so, store the starting index of this window in our answer vector.</p>\n<p>A better approach would be to realize that an anagram is nothing but a rearrangement of characters in a string so the only requirement for 2 strings to be an anagram is that they both must have the same number and frequency of characters:</p>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token string\">\"abc\"</span> <span class=\"token operator\">and</span> <span class=\"token string\">\"cba\"</span> are anagarams\n<span class=\"token string\">\"abc\"</span> <span class=\"token operator\">and</span> <span class=\"token string\">\"abd\"</span> are <span class=\"token operator\">not</span></code></pre></div>\n<p>So, what we can do is this:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">pattern<span class=\"token operator\">:</span> a   b   c\nmake an unordered_map <span class=\"token keyword\">using</span> the pattern\n\ntext<span class=\"token operator\">:</span> c   b   a   e   b   a   b   a   c   d\ncheck the first <span class=\"token number\">3</span> characters <span class=\"token operator\">and</span> make an unordered_map from these first <span class=\"token number\">3</span> chars<span class=\"token punctuation\">.</span>\n\ncompare the map with that of the pattern <span class=\"token keyword\">using</span> the <span class=\"token operator\">==</span> <span class=\"token keyword\">operator</span>\nIf they<span class=\"token number\">'</span>re the same<span class=\"token punctuation\">,</span> store the index in answer vector  \n\nTo move along the text string<span class=\"token punctuation\">,</span> decrement count of previous character from map\n<span class=\"token operator\">and</span> add <span class=\"token keyword\">new</span> character to map<span class=\"token punctuation\">.</span> If previous character count decreases to <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> remove\nit from the map<span class=\"token punctuation\">.</span></code></pre></div>\n<p>This approach takes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> time. Here's this logic converted to code:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">findAnagrams</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">,</span> string p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ans<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n\n        unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> txtMap<span class=\"token punctuation\">,</span> patMap<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            txtMap<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            patMap<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>patMap <span class=\"token operator\">==</span> txtMap<span class=\"token punctuation\">)</span>\n            ans<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//Decrement removed char from map</span>\n            txtMap<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//If count went down to 0,</span>\n            <span class=\"token comment\">//erase from map</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>txtMap<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                txtMap<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            txtMap<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>txtMap <span class=\"token operator\">==</span> patMap<span class=\"token punctuation\">)</span>\n                ans<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><a href=\"https://leetcode.com/problems/group-anagrams/\">Group Anagrams</a></li>\n</ul>\n<p><strong>Given an array of strings strs, group the anagrams together. You can return the answer in any order. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</strong></p>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">Input<span class=\"token operator\">:</span> strs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"eat\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"tea\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"tan\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"ate\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"nat\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"bat\"</span><span class=\"token punctuation\">]</span>\nOutput<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"bat\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"nat\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"tan\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"ate\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"eat\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"tea\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Naive approach is to start with the first string in the input, <code class=\"language-cpptext\">eat</code> and get the frequency of all characters in it. Push this string to a new vector and iterate over remaining input strings to see if any other strings have the same character count. If so, add this new string to the vector. Repeat until done with all strings. This approach takes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> time to calculate character count for a single string and then iterate over all other strings. This comes out to exponential running time. </p>\n<p>Better approach is again to eliminate the need to repeatedly iterate over all the strings. To do so, we need a hash function that'll return a particular string for each anagram. The best hash function for the job would be one that returns the string in sorted order. For example, if we pass <code class=\"language-cpptext\">eat</code> and <code class=\"language-cpptext\">tea</code> to our hash function, we'll get back <code class=\"language-cpptext\">aet</code>. Next, we'll store this sorted string as a key in our hash table and for the value we'll have each string that gets returned from the hash function. For example, given, <code class=\"language-cpptext\">eat</code>, <code class=\"language-cpptext\">tea</code> and <code class=\"language-cpptext\">nat</code>, our hash table would look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">aet <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>eat<span class=\"token punctuation\">,</span> tea<span class=\"token punctuation\">}</span>\nant <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>nat<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Once we have this hash table constructed, all we need to do is grab the values and return our vector of vectors. </p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">    vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">>></span> <span class=\"token function\">groupAnagrams</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> strs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">>></span> ans<span class=\"token punctuation\">;</span>\n        unordered_map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">>></span> hashMap<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> strs<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            string curr <span class=\"token operator\">=</span> strs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            string temp <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> curr<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            hashMap<span class=\"token punctuation\">[</span>curr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> vec <span class=\"token operator\">:</span> hashMap<span class=\"token punctuation\">)</span>\n            ans<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>","timeToRead":3,"excerpt":"All anagrams Given a string s and a non-empty string p, find all the start indices of p's anagrams in s. Strings consists of lowercase…","frontmatter":{"title":"String Problems","date":"2020-10-12T00:00:00.000Z","categories":["Strings"],"extract":"A look at some interesting string problems","thumbnail":"/post-images/string_problems.png","tags":["Data Structures"]},"fields":{"slug":"/string-problems","date":"October 12, 2020"}}},"pageContext":{"slug":"/string-problems","nexttitle":"Greedy Algorithms","nextslug":"/greedy-algorithms","prevtitle":"C++ Standard input","prevslug":"/c-standard-input"}}}