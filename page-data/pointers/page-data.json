{"componentChunkName":"component---src-templates-post-js","path":"/pointers","result":{"data":{"markdownRemark":{"html":"<h3 id=\"table-of-contents\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h3>\n<ol>\n<li><a href=\"#introduction\">Introduction</a></li>\n<li><a href=\"#pointers\">Pointers</a></li>\n<li><a href=\"#pointer-to-pointer\">Pointer to Pointer</a></li>\n<li><a href=\"#heap\">Heap</a></li>\n<li>\n<p><a href=\"#smart-pointers\">Smart Pointers</a></p>\n<ul>\n<li><a href=\"#unique-pointers\">Unique Pointers</a></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"introduction\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h3>\n<p>In this post I'll talk about a fundamental data type in C++ called pointers. To understand pointers in C++, we must understand how a program makes use of memory in C++. Each byte of memory in a computer has a unique address associated with it that increases as we move along. If our first byte has address 201, the next byte would have address 202. A boolean variable is saved in 1 byte of memory, so a boolean can occupy the address 201:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-cpptext\"><code class=\"language-cpptext\">bool b;\nint i;\n\n   b  |---- i -------|\n   __  __  __  __  __  __  __  \n   201 202 203 204 205 206 207\n&lt;--                           --&gt;</code></pre></div>\n<p> Usually, an integer variable takes up 4 bytes of memory. So, if we declare an int, it can be saved at address 202-205. To remember where these variables are saved, a computer has a lookup table that would have 2 entries: <code class=\"language-cpptext\">bool b 201</code> and <code class=\"language-cpptext\">int i 202</code>. When these variables are initialized, their binary representation take up the allocated bytes in memory.</p>\n<p> How do we access or operate on the addresses of these variables? To do so, we use pointers:</p>\n<h3 id=\"pointers\"><a href=\"#pointers\" aria-label=\"pointers permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pointers</h3>\n<p> A pointer is a variable that stores the address of another variable. Let's say, we've got this memory diagram so far:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-cpptext\"><code class=\"language-cpptext\">\nbool b = false;\nint i = 5;\n\n   0  |---- 5 -------|\n   __  __  __  __  __  __  __  \n   201 202 203 204 205 206 207\n&lt;--                           --&gt;</code></pre></div>\n<p>At address 201, we've got a boolean variable stored and at addresses 202-205 we've got an integer saved. Let's say we declare a pointer to an integer:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span></code></pre></div>\n<p>This syntax means that <code class=\"language-cpptext\">p is a pointer to an integer</code>. Next, we need to initialize <code class=\"language-cpptext\">p</code> to some value. Since pointers store addresses, we need to save the address of an integer in this variable <code class=\"language-cpptext\">p</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token keyword\">bool</span> b <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span>\np <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, <code class=\"language-cpptext\">p</code> stores the address of integer i (<code class=\"language-cpptext\">&amp;</code> is the <code class=\"language-cpptext\">address of</code> operator). Let's say our pointer is stored at address 207-210 (pointers also need space to be stored just like an int, bool or char would):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-cpptext\"><code class=\"language-cpptext\">\nbool b = false;\nint i = 5;\nint* p;\np = &amp;i;\n\n   0  |---- 5 -------|     |------ p ----|\n   __  __  __  __  __  __  __  __  __  __   \n   201 202 203 204 205 206 207 208 209 210\n&lt;--                                         --&gt;</code></pre></div>\n<p>Since <code class=\"language-cpptext\">p</code> is holding the address of an integer, our memory diagram would look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-cpptext\"><code class=\"language-cpptext\">\nbool b = false;\nint i = 5;\nint* p;\np = &amp;i;\n\n   0  |---- 5 -------|     |----- 202 ---|\n   __  __  __  __  __  __  __  __  __  __   \n   201 202 203 204 205 206 207 208 209 210\n&lt;--                                         --&gt;</code></pre></div>\n<p>If you print p, you'd get the address stored in p:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"> \n<span class=\"token keyword\">bool</span> b <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span>\np <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//prints 202</span></code></pre></div>\n<p>To get to the actual value in <code class=\"language-cpptext\">p</code>, you'd have to dereference p:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"> \n<span class=\"token keyword\">bool</span> b <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span>\np <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//prints 202</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//prints 5</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//prints 207</span></code></pre></div>\n<p>You can also change the value being pointed to by <code class=\"language-cpptext\">p</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"> \n<span class=\"token keyword\">bool</span> b <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span>\np <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Changing 5 to 10</span>\ncout <span class=\"token operator\">&lt;&lt;</span> p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//prints 202</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//prints 10</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//prints 207</span></code></pre></div>\n<h3 id=\"pointer-to-pointer\"><a href=\"#pointer-to-pointer\" aria-label=\"pointer to pointer permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pointer to Pointer</h3>\n<p>If you really want to get fancy, you can have a pointer to pointer as well. This means that we can have a pointer that stores the address of another pointer:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-cpptext\"><code class=\"language-cpptext\">int i = 5;\nint* p;\np = &amp;i;\n \n        |---- 5 -------|     |------ p ----|\n     __  __  __  __  __  __  __  __  __  __   \n     201 202 203 204 205 206 207 208 209 210\n &lt;--                                         --&gt;</code></pre></div>\n<p>Let's say, we have a pointer to a pointer called <code class=\"language-cpptext\">q</code>, that'll store the address of p. To declare <code class=\"language-cpptext\">q</code>, we use this syntax: <code class=\"language-cpptext\">int** q;</code>: </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-cpptext\"><code class=\"language-cpptext\">int i = 5;\nint* p;\np = &amp;i;\nint** q;\nq = &amp;p;\n \n        |---- 5 -------|     |------ p ----|\n     __  __  __  __  __  __  __  __  __  __   \n     201 202 203 204 205 206 207 208 209 210\n &lt;--                                         --&gt;</code></pre></div>\n<p>So, now, if <code class=\"language-cpptext\">q</code> is stored at address 220, this is what our memory diagram would look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-cpptext\"><code class=\"language-cpptext\">int i = 5;\nint* p;\np = &amp;i;\nint** q;\nq = &amp;p;\n \n        |---- 5 -------|     |-- p = 202 --|              |-- q = 207 --|  \n     __  __  __  __  __  __  __  __  __  __  __  __ ..... __  __  __  __  __    \n     201 202 203 204 205 206 207 208 209 210 211 212 .... 220 221 222 223 224 \n &lt;--                                         --&gt;</code></pre></div>\n<p>So here is what we have now:</p>\n<ul>\n<li><code class=\"language-cpptext\">int i</code></li>\n<li>pointer to int <code class=\"language-cpptext\">p</code>: <code class=\"language-cpptext\">int* p</code></li>\n<li>pointer to pointer to an int: <code class=\"language-cpptext\">q</code>: <code class=\"language-cpptext\">int** q</code></li>\n</ul>\n<h3 id=\"heap\"><a href=\"#heap\" aria-label=\"heap permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Heap</h3>\n<p>In C++, you can create dynamic memory using the <code class=\"language-cpptext\">new</code> keyword and access it via a pointer. For example, let's say we've got an integer pointer:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> arr<span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-cpptext\">foo</code> needs to point to the address of an integer. We can declare an array of integers and have <code class=\"language-cpptext\">foo</code> point to the first element in that array. It is technically correct to do so since we're saving the address of the first integer in that array in our <code class=\"language-cpptext\">foo</code> variable. To do so, we need to declare this new dynamically allocated array using the <code class=\"language-cpptext\">new</code> keyword. Unlike static arrays, size of a dynamic array can be declare at run time:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> arr<span class=\"token punctuation\">;</span>\narr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>What we've done here is that we've asked the <code class=\"language-cpptext\">new</code> operator to reserve a block of contiguous memory on the heap equal to the size of 5 integers. Then, return the address of the start of that block. We then capture that address in our variable called <code class=\"language-cpptext\">arr</code>. Our memory diagram would look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-cpptext\"><code class=\"language-cpptext\">___ ___ ___ ___ ___ \n |\narr </code></pre></div>\n<p>We can then access each element of the array like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> arr<span class=\"token punctuation\">;</span>\narr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-cpptext\">arr[0]</code> would access the first dynamically allocated integer spot in the array and so on. Saying <code class=\"language-cpptext\">arr[0]</code> is the same as saying <code class=\"language-cpptext\">*(arr)</code>, <code class=\"language-cpptext\">arr[1]</code> is the same as saying <code class=\"language-cpptext\">*(arr + 1)</code> and so on. Incase your <code class=\"language-cpptext\">new</code> operator call is not able to find memory on heap for some reason, you can catch it like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>nothrow<span class=\"token punctuation\">)</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Handle error...</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Do something with the new memory...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Once done with the array, we'd have to explicitly call the <code class=\"language-cpptext\">delete</code> function on it:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> foo<span class=\"token punctuation\">;</span>\nfoo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// do something with the array,</span>\n<span class=\"token comment\">// then delete it:</span>\n<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> foo<span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"smart-pointers\"><a href=\"#smart-pointers\" aria-label=\"smart pointers permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Smart Pointers</h3>\n<p>We can make use of smart pointers that'll handle the creation of the said pointer and freeing of memory once we're done with it. This will ensure that we don't leak memory in our C++ programs. Smart pointers are defined in the header called <code class=\"language-cpptext\">memory</code>. Below, we discuss various types of smart pointers.</p>\n<h4 id=\"unique-pointers\"><a href=\"#unique-pointers\" aria-label=\"unique pointers permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unique Pointers</h4>\n<p>As the name suggests, unique pointers are pointers that point to unique objects: an object reference cannot be copied over from one unique pointer to another. Unique pointers are scoped pointers: as they go out of scope they're automatically deleted and the memory the unique pointer is pointing to is automatically deallocated. This is why unique pointers have to point to unique objects and copying of unique pointers is not recommended. Let's have a look at a unique pointer in action: </p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber 0\" class=\"language-cppcpp line-numbers\"><code class=\"language-cppcpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    string title<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Constructor called! \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">SetTitle</span><span class=\"token punctuation\">(</span>string t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        title <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    string <span class=\"token function\">GetTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> title<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token operator\">~</span><span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Destructor called! \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"About to enter scope\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">{</span>\n        unique_ptr<span class=\"token operator\">&lt;</span>Book<span class=\"token operator\">></span> ptr <span class=\"token operator\">=</span> make_unique<span class=\"token operator\">&lt;</span>Book<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ptr<span class=\"token operator\">-></span><span class=\"token function\">SetTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"My new title!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> ptr<span class=\"token operator\">-></span><span class=\"token function\">GetTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Exited the scope\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>We've created a class of type Book that has 4 simple methods. Next, in main, we've initialized our <code class=\"language-cpptext\">unique_ptr</code> inside a scope and assigned it the Book object. We then call the set and get title and then the scope exits. When the scope exits, <code class=\"language-cpptext\">unique_ptr</code> will automatically handle the freeing up of memory for us as demonstrated by this output when you run the program:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-cpptext\"><code class=\"language-cpptext\">About to enter scope\nConstructor called! \nMy new title!\nDestructor called! \nExited the scope\nProgram ended with exit code: 0</code></pre></div>\n<p>You can't copy a unique pointer to another unique pointer or pass a unique pointer to a function.</p>\n<h4 id=\"shared-pointers\"><a href=\"#shared-pointers\" aria-label=\"shared pointers permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Shared Pointers</h4>\n<p>Unlike unique pointers that are freed when they go out of scope, shared pointers are not deleted for us until all references to that pointer are deleted. To do so, behind the scenes, reference counting is used. For example, if I had a shared pointer pointing to an object and I make a copy of the shared pointer and then the original one goes out of scope, my shared pointer would still be able to access the object. Let's have a look:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"About to enter scope\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    shared_ptr<span class=\"token operator\">&lt;</span>Book<span class=\"token operator\">></span> b2<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">{</span>        \n        shared_ptr<span class=\"token operator\">&lt;</span>Book<span class=\"token operator\">></span> b1 <span class=\"token operator\">=</span> make_shared<span class=\"token operator\">&lt;</span>Book<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        b1<span class=\"token operator\">-></span><span class=\"token function\">SetTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Shared pointer book\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> b1<span class=\"token operator\">-></span><span class=\"token function\">GetTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        b2 <span class=\"token operator\">=</span> b1<span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"use count inside the scope: \"</span> <span class=\"token operator\">&lt;&lt;</span>b2<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Exited the scope\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> b2<span class=\"token operator\">-></span><span class=\"token function\">GetTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"use count outside the scope: \"</span> <span class=\"token operator\">&lt;&lt;</span>b2<span class=\"token punctuation\">.</span><span class=\"token function\">use_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We used the same Book class as above but this time, we used 2 shared pointers. The <code class=\"language-cpptext\">use.count()</code> method allows us to check the number of elements that are using this shared pointer. Once that number goes down to 0, the shared pointer's destructor is called:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-cpptext\"><code class=\"language-cpptext\">About to enter scope\nConstructor called! \nShared pointer book\nuse count inside the scope: 2\nExited the scope\nShared pointer book\nuse count outside the scope: 1\nDestructor called! \nProgram ended with exit code: 0</code></pre></div>","timeToRead":8,"excerpt":"Table of Contents Introduction Pointers Pointer to Pointer Heap Smart Pointers Unique Pointers Introduction In this post I'll talk about a…","frontmatter":{"title":"Pointers","date":"2020-02-16T00:00:00.000Z","categories":["General"],"extract":"Pointers in C++","thumbnail":"/post-images/pointers.png","tags":["C++","Pointers"]},"fields":{"slug":"/pointers","date":"February 16, 2020"}}},"pageContext":{"slug":"/pointers","nexttitle":"Undirected Graphs Breadth First Search","nextslug":"/undirected-graphs-breadth-first-search","prevtitle":"Union Find","prevslug":"/union-find"}},"staticQueryHashes":["3969716136"]}