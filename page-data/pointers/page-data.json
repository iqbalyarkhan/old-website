{"componentChunkName":"component---src-templates-post-js","path":"/pointers","result":{"data":{"markdownRemark":{"html":"<h3 id=\"table-of-contents\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h3>\n<ol>\n<li><a href=\"#introduction\">Introduction</a></li>\n<li><a href=\"#pointers\">Pointers</a></li>\n<li><a href=\"#pointer-to-pointer\">Pointer to Pointer</a></li>\n<li><a href=\"#heap\">Heap</a></li>\n</ol>\n<h3 id=\"introduction\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h3>\n<p>In this post I'll talk about a fundamental data type in C++ called pointers. To understand pointers in C++, we must understand how a program makes use of memory in C++. Each byte of memory in a computer has a unique address associated with it that increases as we move along. If our first byte has address 201, the next byte would have address 202. A boolean variable is saved in 1 byte of memory, so a boolean can occupy the address 201:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">bool b;\nint i;\n\n   b  |---- i -------|\n   __  __  __  __  __  __  __  \n   201 202 203 204 205 206 207\n&lt;--                           --&gt;</code></pre></div>\n<p> Usually, an integer variable takes up 4 bytes of memory. So, if we declare an int, it can be saved at address 202-205. To remember where these variables are saved, a computer has a lookup table that would have 2 entries: <code class=\"language-text\">bool b 201</code> and <code class=\"language-text\">int i 202</code>. When these variables are initialized, their binary representation take up the allocated bytes in memory.</p>\n<p> How do we access or operate on the addresses of these variables? To do so, we use pointers:</p>\n<h3 id=\"pointers\"><a href=\"#pointers\" aria-label=\"pointers permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pointers</h3>\n<p> A pointer is a variable that stores the address of another variable. Let's say, we've got this memory diagram so far:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\nbool b = false;\nint i = 5;\n\n   0  |---- 5 -------|\n   __  __  __  __  __  __  __  \n   201 202 203 204 205 206 207\n&lt;--                           --&gt;</code></pre></div>\n<p>At address 201, we've got a boolean variable stored and at addresses 202-205 we've got an integer saved. Let's say we declare a pointer to an integer:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span></code></pre></div>\n<p>This syntax means that <code class=\"language-text\">p is a pointer to an integer</code>. Next, we need to initialize <code class=\"language-text\">p</code> to some value. Since pointers store addresses, we need to save the address of an integer in this variable <code class=\"language-text\">p</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">bool</span> b <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span>\np <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, <code class=\"language-text\">p</code> stores the address of integer i (<code class=\"language-text\">&amp;</code> is the <code class=\"language-text\">address of</code> operator). Let's say our pointer is stored at address 207-210 (pointers also need space to be stored just like an int, bool or char would):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\nbool b = false;\nint i = 5;\nint* p;\np = &amp;i;\n\n   0  |---- 5 -------|     |------ p ----|\n   __  __  __  __  __  __  __  __  __  __   \n   201 202 203 204 205 206 207 208 209 210\n&lt;--                                         --&gt;</code></pre></div>\n<p>Since <code class=\"language-text\">p</code> is holding the address of an integer, our memory diagram would look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\nbool b = false;\nint i = 5;\nint* p;\np = &amp;i;\n\n   0  |---- 5 -------|     |----- 202 ---|\n   __  __  __  __  __  __  __  __  __  __   \n   201 202 203 204 205 206 207 208 209 210\n&lt;--                                         --&gt;</code></pre></div>\n<p>If you print p, you'd get the address stored in p:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"> \n<span class=\"token keyword\">bool</span> b <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span>\np <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//prints 202</span></code></pre></div>\n<p>To get to the actual value in <code class=\"language-text\">p</code>, you'd have to dereference p:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"> \n<span class=\"token keyword\">bool</span> b <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span>\np <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//prints 202</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//prints 5</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//prints 207</span></code></pre></div>\n<p>You can also change the value being pointed to by <code class=\"language-text\">p</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"> \n<span class=\"token keyword\">bool</span> b <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span>\np <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Changing 5 to 10</span>\ncout <span class=\"token operator\">&lt;&lt;</span> p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//prints 202</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//prints 10</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//prints 207</span></code></pre></div>\n<h3 id=\"pointer-to-pointer\"><a href=\"#pointer-to-pointer\" aria-label=\"pointer to pointer permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pointer to Pointer</h3>\n<p>If you really want to get fancy, you can have a pointer to pointer as well. This means that we can have a pointer that stores the address of another pointer:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">int i = 5;\nint* p;\np = &amp;i;\n \n        |---- 5 -------|     |------ p ----|\n     __  __  __  __  __  __  __  __  __  __   \n     201 202 203 204 205 206 207 208 209 210\n &lt;--                                         --&gt;</code></pre></div>\n<p>Let's say, we have a pointer to a pointer called <code class=\"language-text\">q</code>, that'll store the address of p. To declare <code class=\"language-text\">q</code>, we use this syntax: <code class=\"language-text\">int** q;</code>: </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">int i = 5;\nint* p;\np = &amp;i;\nint** q;\nq = &amp;p;\n \n        |---- 5 -------|     |------ p ----|\n     __  __  __  __  __  __  __  __  __  __   \n     201 202 203 204 205 206 207 208 209 210\n &lt;--                                         --&gt;</code></pre></div>\n<p>So, now, if <code class=\"language-text\">q</code> is stored at address 220, this is what our memory diagram would look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">int i = 5;\nint* p;\np = &amp;i;\nint** q;\nq = &amp;p;\n \n        |---- 5 -------|     |-- p = 202 --|              |-- q = 207 --|  \n     __  __  __  __  __  __  __  __  __  __  __  __ ..... __  __  __  __  __    \n     201 202 203 204 205 206 207 208 209 210 211 212 .... 220 221 222 223 224 \n &lt;--                                         --&gt;</code></pre></div>\n<p>So here is what we have now:</p>\n<ul>\n<li><code class=\"language-text\">int i</code></li>\n<li>pointer to int <code class=\"language-text\">p</code>: <code class=\"language-text\">int* p</code></li>\n<li>pointer to pointer to an int: <code class=\"language-text\">q</code>: <code class=\"language-text\">int** q</code></li>\n</ul>\n<h3 id=\"heap\"><a href=\"#heap\" aria-label=\"heap permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Heap</h3>\n<p>In C++, you can create dynamic memory using the <code class=\"language-text\">new</code> keyword and access it via a pointer. For example, let's say we've got an integer pointer:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> arr<span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">foo</code> needs to point to the address of an integer. We can declare an array of integers and have <code class=\"language-text\">foo</code> point to the first element in that array. It is technically correct to do so since we're saving the address of the first integer in that array in our <code class=\"language-text\">foo</code> variable. To do so, we need to declare this new dynamically allocated array using the <code class=\"language-text\">new</code> keyword. Unlike static arrays, size of a dynamic array can be declare at run time:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> arr<span class=\"token punctuation\">;</span>\narr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>What we've done here is that we've asked the <code class=\"language-text\">new</code> operator to reserve a block of contiguous memory on the heap equal to the size of 5 integers. Then, return the address of the start of that block. We then capture that address in our variable called <code class=\"language-text\">arr</code>. Our memory diagram would look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">___ ___ ___ ___ ___ \n |\narr </code></pre></div>\n<p>We can then access each element of the array like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> arr<span class=\"token punctuation\">;</span>\narr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">arr[0]</code> would access the first dynamically allocated integer spot in the array and so on. Saying <code class=\"language-text\">arr[0]</code> is the same as saying <code class=\"language-text\">*(arr)</code>, <code class=\"language-text\">arr[1]</code> is the same as saying <code class=\"language-text\">*(arr + 1)</code> and so on. Incase your <code class=\"language-text\">new</code> operator call is not able to find memory on heap for some reason, you can catch it like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>nothrow<span class=\"token punctuation\">)</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Handle error...</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Do something with the new memory...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Once done with the array, we'd have to explicitly call the <code class=\"language-text\">delete</code> function on it:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> foo<span class=\"token punctuation\">;</span>\nfoo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// do something with the array,</span>\n<span class=\"token comment\">// then delete it:</span>\n<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> foo<span class=\"token punctuation\">;</span></code></pre></div>","timeToRead":5,"excerpt":"Table of Contents Introduction Pointers Pointer to Pointer Heap Introduction In this post I'll talk about a fundamental data type in C…","frontmatter":{"title":"Pointers","date":"2020-02-16T00:00:00.000Z","categories":["C++"],"extract":"Pointers in C++","thumbnail":"/post-images/pointers.png","tags":["C++","Pointers"]},"fields":{"slug":"/pointers","date":"February 16, 2020"}}},"pageContext":{"slug":"/pointers","nexttitle":"Undirected Graphs","nextslug":"/undirected-graphs","prevtitle":"Union Find","prevslug":"/union-find"}}}