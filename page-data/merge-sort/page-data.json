{"componentChunkName":"component---src-templates-post-js","path":"/merge-sort","result":{"data":{"markdownRemark":{"html":"<h3 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h3>\n<ol>\n<li>\n<p><a href=\"#introduction\">Introduction</a></p>\n</li>\n<li>\n<p><a href=\"#logic\">Logic</a></p>\n</li>\n<li>\n<p><a href=\"#merge\">Merge</a></p>\n</li>\n<li>\n<p><a href=\"#sort\">Sort</a></p>\n</li>\n<li>\n<p><a href=\"#output\">Output</a></p>\n</li>\n<li>\n<p><a href=\"#conclusion\">Conclusion</a></p>\n</li>\n</ol>\n<h3 id=\"introduction\" style=\"position:relative;\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h3>\n<p>In this post I'll talk about a sorting algorithm called Merge Sort. The idea behind merge sort is to start with breaking down an array into smaller pieces and then merging those smaller pieces back together in sorted order. This approach is commonly called <strong>divide and conquer</strong> where we divide our array into smaller chunks (via recursion) and perform the conquer operation of merging those smaller chunks back together.</p>\n<h3 id=\"logic\" style=\"position:relative;\"><a href=\"#logic\" aria-label=\"logic permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Logic</h3>\n<p>Here're the three basic steps of merge sort:</p>\n<ul>\n<li>Divide an array into smaller halves</li>\n<li>Recursively sort each half</li>\n<li>Merge the sorted halves</li>\n</ul>\n<p>Let's start with a sample array and see how we can use merge sort to sort it:</p>\n<table>\n<thead>\n<tr>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>8</td>\n<td>1</td>\n<td>6</td>\n<td>2</td>\n<td>4</td>\n<td>3</td>\n<td>5</td>\n<td>7</td>\n<td>9</td>\n</tr>\n</tbody>\n</table>\n<p>The idea is to keep breaking the array into pieces until we get to the smallest element possible: a single element. An element, by itself, is already in sorted order: if I gave you an array that looked like this: <code class=\"language-cpptext\">[2]</code> (with a single element) and asked you if it was sorted, you'd say yes!</p>\n<p>So, let's start with breaking this array down. Randomly, I chose the left half of the array:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">\n<span class=\"token punctuation\">[</span><span class=\"token number\">8</span>   <span class=\"token number\">1</span>   <span class=\"token number\">6</span>   <span class=\"token number\">2</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Next, we break it down farther:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">\n<span class=\"token punctuation\">[</span><span class=\"token number\">8</span>   <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>       <span class=\"token punctuation\">[</span><span class=\"token number\">6</span>   <span class=\"token number\">2</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>and some more:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">\n<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span>       <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>       <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>       <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>We now have 4 elements: 8,1,6 and 2 that are by themselves in arrays of size 1. We're now ready to merge our way back up.</p>\n<p>Let's start with two sorted arrays of 8 and 1:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span>   <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>How do we merge two sorted arrays? Well, we create a new array of size equal to the two arrays, place two pointers (<code class=\"language-cpptext\">i</code> and <code class=\"language-cpptext\">j</code>) at the start of each array, and then place in the new array the element that is the smallest. We keep incrementing the pointers until we've reached the end.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">\n<span class=\"token keyword\">new</span> arr<span class=\"token operator\">:</span>            <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span>\n                     i     j           \n                     <span class=\"token operator\">|</span>     <span class=\"token operator\">|</span>\nold sorted arrs<span class=\"token operator\">:</span>    <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span>   <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p><code class=\"language-cpptext\">j</code> &#x3C; <code class=\"language-cpptext\">i</code> so add <code class=\"language-cpptext\">rightArr[j]</code> to <code class=\"language-cpptext\">newArr</code>, increment <code class=\"language-cpptext\">j</code> and keep <code class=\"language-cpptext\">i</code> in its old position:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">\n<span class=\"token keyword\">new</span> arr<span class=\"token operator\">:</span>            <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span>\n                     i       j           \n                     <span class=\"token operator\">|</span>       <span class=\"token operator\">|</span>\nold sorted arrs<span class=\"token operator\">:</span>    <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span>   <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>We don't have anymore elements in <code class=\"language-cpptext\">rightArr</code> since <code class=\"language-cpptext\">j</code> is past the end of <code class=\"language-cpptext\">rightArr</code>. We can now copy over all the elements from <code class=\"language-cpptext\">leftArr</code> into our <code class=\"language-cpptext\">newArr</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">\n<span class=\"token keyword\">new</span> arr<span class=\"token operator\">:</span>            <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span>\n                       i     j           \n                       <span class=\"token operator\">|</span>     <span class=\"token operator\">|</span>\nold sorted arrs<span class=\"token operator\">:</span>    <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span>   <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Our new arr is sorted with 2 elements! We can now return this new arr. We repeat this process with other elements as well and keep merging with the sorted array.</p>\n<h3 id=\"merge\" style=\"position:relative;\"><a href=\"#merge\" aria-label=\"merge permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Merge</h3>\n<p>Let's start with the idea of merging. Assume we've got an array that is divided into two halves and the two halves are already sorted (indices 0 - 4 are sorted and 5 - 8 are sorted):</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">\nvalue   <span class=\"token number\">1</span>   <span class=\"token number\">2</span>   <span class=\"token number\">3</span>   <span class=\"token number\">6</span>   <span class=\"token number\">8</span>   <span class=\"token number\">4</span>   <span class=\"token number\">5</span>   <span class=\"token number\">7</span>   <span class=\"token number\">9</span>\nindex   <span class=\"token number\">0</span>   <span class=\"token number\">1</span>   <span class=\"token number\">2</span>   <span class=\"token number\">3</span>   <span class=\"token number\">4</span>   <span class=\"token number\">5</span>   <span class=\"token number\">6</span>   <span class=\"token number\">7</span>   <span class=\"token number\">8</span>\n</code></pre></div>\n<p>Let's assign variables to the indices. <code class=\"language-cpptext\">lo</code> is the lowest index in the array, <code class=\"language-cpptext\">mid</code> is middle and <code class=\"language-cpptext\">hi</code> is the last index:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">        lo             mid mid<span class=\"token operator\">+</span><span class=\"token number\">1</span>        hi\nvalue   <span class=\"token number\">1</span>   <span class=\"token number\">2</span>   <span class=\"token number\">3</span>   <span class=\"token number\">6</span>   <span class=\"token number\">8</span>   <span class=\"token number\">4</span>   <span class=\"token number\">5</span>   <span class=\"token number\">7</span>   <span class=\"token number\">9</span>\nindex   <span class=\"token number\">0</span>   <span class=\"token number\">1</span>   <span class=\"token number\">2</span>   <span class=\"token number\">3</span>   <span class=\"token number\">4</span>   <span class=\"token number\">5</span>   <span class=\"token number\">6</span>   <span class=\"token number\">7</span>   <span class=\"token number\">8</span>\n</code></pre></div>\n<p>Next, we copy over the elements to an temp array and then populate the original array in sorted order. To do so, we have the following pointers:</p>\n<ul>\n<li>Start at index <code class=\"language-cpptext\">lo</code> of the original array using a pointer <code class=\"language-cpptext\">k</code>. This is the index at which we'll start over-writing values</li>\n<li>A pointer at position <code class=\"language-cpptext\">lo</code> in the temp array and call it <code class=\"language-cpptext\">i</code></li>\n<li>A pointer at position <code class=\"language-cpptext\">mid+1</code> and call it <code class=\"language-cpptext\">j</code>:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">value   <span class=\"token number\">1</span>   <span class=\"token number\">2</span>   <span class=\"token number\">3</span>   <span class=\"token number\">6</span>   <span class=\"token number\">8</span>   <span class=\"token number\">4</span>   <span class=\"token number\">5</span>   <span class=\"token number\">7</span>   <span class=\"token number\">9</span>\n        k\n\ntemp    <span class=\"token number\">1</span>   <span class=\"token number\">2</span>   <span class=\"token number\">3</span>   <span class=\"token number\">6</span>   <span class=\"token number\">8</span>   <span class=\"token number\">4</span>   <span class=\"token number\">5</span>   <span class=\"token number\">7</span>   <span class=\"token number\">9</span>\n        i                   j</code></pre></div>\n<p>We use <code class=\"language-cpptext\">lo</code> and <code class=\"language-cpptext\">mid+1</code> to signify that :</p>\n<ul>\n<li><code class=\"language-cpptext\">lo</code> - <code class=\"language-cpptext\">mid</code> is sorted and</li>\n<li><code class=\"language-cpptext\">mid+1</code> - <code class=\"language-cpptext\">hi</code> is sorted</li>\n</ul>\n<p>Next, we start our comparisons with a  simple logic. If <code class=\"language-cpptext\">temp[i]</code> &#x3C; <code class=\"language-cpptext\">temp[j]</code> copy it over to <code class=\"language-cpptext\">arr[k]</code> otherwise copy over <code class=\"language-cpptext\">temp[j]</code>. Increment <code class=\"language-cpptext\">k</code> and whichever pointer you copied over from:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> temp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    originalArr<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    originalArr<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nk<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>So, here's how we'll proceed:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">\nStep <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n\nvalue   <span class=\"token number\">1</span>   <span class=\"token number\">2</span>   <span class=\"token number\">3</span>   <span class=\"token number\">6</span>   <span class=\"token number\">8</span>   <span class=\"token number\">4</span>   <span class=\"token number\">5</span>   <span class=\"token number\">7</span>   <span class=\"token number\">9</span>\n        k\n\ntemp    <span class=\"token number\">1</span>   <span class=\"token number\">2</span>   <span class=\"token number\">3</span>   <span class=\"token number\">6</span>   <span class=\"token number\">8</span>   <span class=\"token number\">4</span>   <span class=\"token number\">5</span>   <span class=\"token number\">7</span>   <span class=\"token number\">9</span>\n        i                   j\n\ni <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">,</span> copy i <span class=\"token operator\">and</span> increment i <span class=\"token operator\">and</span> k<span class=\"token operator\">:</span>\n\nvalue   <span class=\"token number\">1</span>   <span class=\"token number\">2</span>   <span class=\"token number\">3</span>   <span class=\"token number\">6</span>   <span class=\"token number\">8</span>   <span class=\"token number\">4</span>   <span class=\"token number\">5</span>   <span class=\"token number\">7</span>   <span class=\"token number\">9</span>\n            k\n\ntemp    <span class=\"token number\">1</span>   <span class=\"token number\">2</span>   <span class=\"token number\">3</span>   <span class=\"token number\">6</span>   <span class=\"token number\">8</span>   <span class=\"token number\">4</span>   <span class=\"token number\">5</span>   <span class=\"token number\">7</span>   <span class=\"token number\">9</span>\n            i               j\n\nStep <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n\nagain<span class=\"token punctuation\">,</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">,</span> copy i <span class=\"token operator\">and</span> increment i <span class=\"token operator\">and</span> k<span class=\"token operator\">:</span>\n\nvalue   <span class=\"token number\">1</span>   <span class=\"token number\">2</span>   <span class=\"token number\">3</span>   <span class=\"token number\">6</span>   <span class=\"token number\">8</span>   <span class=\"token number\">4</span>   <span class=\"token number\">5</span>   <span class=\"token number\">7</span>   <span class=\"token number\">9</span>\n                k\n\ntemp    <span class=\"token number\">1</span>   <span class=\"token number\">2</span>   <span class=\"token number\">3</span>   <span class=\"token number\">6</span>   <span class=\"token number\">8</span>   <span class=\"token number\">4</span>   <span class=\"token number\">5</span>   <span class=\"token number\">7</span>   <span class=\"token number\">9</span>\n                i           j</code></pre></div>\n<p>We continue until either <code class=\"language-cpptext\">i</code> crosses over to <code class=\"language-cpptext\">mid+1</code> or if <code class=\"language-cpptext\">j</code> gets to <code class=\"language-cpptext\">hi + 1</code>. In either case, if the other hasn't reached its end, we'd continue to copy over the elements until the pointers reach their respective ends. We need the value of mid being passed to <code class=\"language-cpptext\">merge</code> because if we have odd number of elements in the array, our mid calculation by subtracting <code class=\"language-cpptext\">lo</code> from <code class=\"language-cpptext\">hi</code> would be off.</p>\n<p>Here's the code for merging:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber 0\" class=\"language-cppcpp line-numbers\"><code class=\"language-cppcpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">Merge</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> originalArr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> lo<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> hi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">temp</span><span class=\"token punctuation\">(</span>originalArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> lo <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>hi <span class=\"token operator\">-</span> lo<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> lo<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> lo<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;=</span> hi<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> mid<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> temp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> temp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            originalArr<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;=</span> hi<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> temp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> temp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            originalArr<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">></span> hi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            originalArr<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            originalArr<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>One caveat above: we need to assign <code class=\"language-cpptext\">k</code> to <code class=\"language-cpptext\">lo</code> and not 0 because since we're passing in a reference to our original array, the current iteration of merge is only responsible for handling the merging between <code class=\"language-cpptext\">lo</code> and <code class=\"language-cpptext\">hi</code>. If we assign <code class=\"language-cpptext\">k</code> to 0, we'd be overwriting the work of other merges in the current call.</p>\n<h3 id=\"sort\" style=\"position:relative;\"><a href=\"#sort\" aria-label=\"sort permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sort</h3>\n<p>The sort procedure's job is to recursively break down the array into smaller chunks which means the <code class=\"language-cpptext\">sort</code> procedure is responsible for calculating the <code class=\"language-cpptext\">lo</code>,<code class=\"language-cpptext\">mid</code> and <code class=\"language-cpptext\">hi</code>, and sending to merge when appropriate:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber 0\" class=\"language-cppcpp line-numbers\"><code class=\"language-cppcpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">MergeSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> A<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lo<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> hi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lo <span class=\"token operator\">==</span> hi<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> lo <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>hi <span class=\"token operator\">-</span> lo<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">MergeSort</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> lo<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">MergeSort</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> hi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Merge</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span>lo<span class=\"token punctuation\">,</span>hi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The function checks first to make sure that we have more than 1 elements to sort. If so, it calculates the <code class=\"language-cpptext\">mid</code> value and calls itself first with the left half and then the right half. Once it is down to the smallest element, it starts calling the merge recursively.</p>\n<h3 id=\"output\" style=\"position:relative;\"><a href=\"#output\" aria-label=\"output permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Output</h3>\n<p>Let's examine the output when we call merge sort with the array: 9,8,7,6,5:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-cppcss\"><code class=\"language-cppcss\">Original <span class=\"token property\">Array</span><span class=\"token punctuation\">:</span>\n9 8 7 6 5\n\nReturning from <span class=\"token property\">merge</span><span class=\"token punctuation\">:</span> \n8 9 7 6 5 \n\nReturning from <span class=\"token property\">merge</span><span class=\"token punctuation\">:</span> \n7 8 9 6 5 \n\nReturning from <span class=\"token property\">merge</span><span class=\"token punctuation\">:</span> \n7 8 9 5 6 \n\nReturning from <span class=\"token property\">merge</span><span class=\"token punctuation\">:</span> \n5 6 7 8 9 \n\n<span class=\"token property\">Finally</span><span class=\"token punctuation\">:</span> \n5 6 7 8 9 \nProgram ended with exit <span class=\"token property\">code</span><span class=\"token punctuation\">:</span> 0</code></pre></div>\n<h3 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h3>\n<p>Merge sort runs in <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N log N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">Nl</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span></span> time and its space complexity is <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span></span>.</p>","timeToRead":6,"excerpt":"Table of Contents Introduction Logic Merge Sort Output Conclusion Introduction In this post I'll talk about a sorting algorithm called Merge…","frontmatter":{"title":"Merge Sort","date":"2019-08-18T00:00:00.000Z","categories":["Algorithms"],"extract":"Explanation and implementation of merge sort algorithm","thumbnail":"/post-images/merge.png","tags":["Sorting Algorithms","Merge Sort"]},"fields":{"slug":"/merge-sort","date":"August 18, 2019"}}},"pageContext":{"slug":"/merge-sort","nexttitle":"Selection Sort","nextslug":"/selection-sort","prevtitle":"Linked Lists","prevslug":"/linked-lists"}},"staticQueryHashes":["3969716136"]}