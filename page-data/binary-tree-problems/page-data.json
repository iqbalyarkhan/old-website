{"componentChunkName":"component---src-templates-post-js","path":"/binary-tree-problems","result":{"data":{"markdownRemark":{"html":"<h3 id=\"table-of-contents\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h3>\n<ol>\n<li><a href=\"#intro\">Intro</a></li>\n<li>\n<p>Problems</p>\n<ul>\n<li><a href=\"#traversal\">Traversal</a></li>\n<li><a href=\"#check-if-balanced\">Check if balanced</a></li>\n<li><a href=\"#check-if-tree-is-symmetric\">Check if tree is symmetric</a></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"intro\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h3>\n<p>A binary tree is a data structure that is useful for representing hierarchy. Formally a binary tree is either empty or a root node r together with a left binary tree and a right binary tree.</p>\n<p>The depth of a node n is the number of nodes on the search path from the root to n, not including n itself. The height of a binary tree is the maximum depth of any node in that tree. A level of a tree is all nodes at the same depth.</p>\n<p>A full binary tree is a binary tree in which every node other than the leaves has two children. </p>\n<p>A perfect binary tree is a full binary tree in which all leaves are at the same depth, and in which every parent has two children. </p>\n<p>A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.  </p>\n<p>3 main types of traversals are: preorder, inorder and postorder.</p>\n<p>Basic data structure to represent a node in our tree would be:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">{</span>\n    T data<span class=\"token punctuation\">;</span>\n    Node<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span> left <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n    Node<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span> right <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"traversal\"><a href=\"#traversal\" aria-label=\"traversal permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Traversal</h3>\n<p><strong>Given a binary tree, traverse the tree in pre-, in- and post-orders.</strong></p>\n<p>Recursively this is quite simple:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">PreOrder</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    \n    cout <span class=\"token operator\">&lt;&lt;</span> root<span class=\"token operator\">-></span>data <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">PreOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">PreOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">InOrder</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">InOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> root<span class=\"token operator\">-></span>data <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">InOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Postorder</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">Postorder</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Postorder</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> root<span class=\"token operator\">-></span>data <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Running time is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> and space complexity is the call stack used to traverse the tree which at most uses <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>h</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(h)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">h</span><span class=\"mclose\">)</span></span></span></span> space where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">h</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">h</span></span></span></span> is the height of our tree. </p>\n<h3 id=\"check-if-balanced\"><a href=\"#check-if-balanced\" aria-label=\"check if balanced permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Check if balanced</h3>\n<p><strong>Write a program that takes as input the root of a binary tree and checks whether the tree is height-balanced.\nA binary tree is said to be height-balanced if for each node in the tree, the difference in the height of its left and right subtrees is at most one.</strong></p>\n<p>A brute force approach would be to start at root, look at left subtree and then right subtree and compared. Then move to left subtree and then look at its left subtree and right subtree and compare. Continue until you either find imbalance or you're out of nodes to consider. The running time is approximately <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>h</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(h^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">h</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">h</span></span></span></span> is the height of the tree. This seems complicated and time consuming. </p>\n<p>Another approach would be to recursively go down the tree and once at the leaf, start coming back up and storing the heights in a data structure which can be accessed later to compare the heights for each node. This is better time wise than brute force but requires more space for that external data structure. </p>\n<p>Best approach makes use of this insight: we're only interested in seeing if the heights differ by more than 1, we do not need to store the heights. After processing each node's left and right subtrees, we can look at the heights returned and determine whether the tree is balanced. As soon as we find a subtree that is unbalanced, we can return. </p>\n<p>So here's how this approach works. Say we have this tree:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">    \n            <span class=\"token number\">12</span>\n           <span class=\"token operator\">/</span>  \\\n         <span class=\"token number\">11</span>   <span class=\"token number\">10</span>\n        <span class=\"token operator\">/</span>  \\   \n       <span class=\"token number\">9</span>    <span class=\"token number\">8</span> \n      <span class=\"token operator\">/</span>  \n     <span class=\"token number\">7</span>\n    <span class=\"token operator\">/</span>\n   <span class=\"token number\">6</span>   </code></pre></div>\n<p>this tree is unbalanced because node <code class=\"language-cpptext\">9</code> has left subtree that has height 2 and right subtree that has height 0. We'll make our way down the tree using one of the tree traversal methods we discussed in the previous question: post-order traversal. That is because we need to process the left subtree of a node, then right subtree of a node and then compare those heights at the node which fits well with how post order works. </p>\n<p>Having said that, this is how we'll go down the tree:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">    <span class=\"token number\">12</span>\n     <span class=\"token operator\">|</span>_ <span class=\"token number\">11</span>\n         <span class=\"token operator\">|</span>_ <span class=\"token number\">9</span>\n            <span class=\"token operator\">|</span>_ <span class=\"token number\">7</span>\n               <span class=\"token operator\">|</span>_ <span class=\"token number\">6</span>\n\n<span class=\"token number\">6</span> has no children<span class=\"token punctuation\">,</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n\n    <span class=\"token number\">12</span>\n     <span class=\"token operator\">|</span>_ <span class=\"token number\">11</span>\n         <span class=\"token operator\">|</span>_ <span class=\"token number\">9</span>\n            <span class=\"token operator\">|</span>_ <span class=\"token number\">7</span>\n\n<span class=\"token number\">7</span> has no right children <span class=\"token keyword\">return</span> <span class=\"token number\">0.</span>\n\nSo now that we<span class=\"token string\">'ve processed both the left and right subtree of 7, we'</span>re ready to compare<span class=\"token operator\">:</span>\n<span class=\"token number\">7</span><span class=\"token operator\">-></span>left height <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token number\">7</span><span class=\"token operator\">-></span>right height <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token operator\">|</span>left <span class=\"token operator\">-</span> right<span class=\"token operator\">|</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span> so we<span class=\"token string\">'re good. Now for 7'</span>s parent<span class=\"token punctuation\">,</span> <span class=\"token keyword\">return</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1.</span>\n\n    <span class=\"token number\">12</span>\n     <span class=\"token operator\">|</span>_ <span class=\"token number\">11</span>\n         <span class=\"token operator\">|</span>_ <span class=\"token number\">9</span>\n            <span class=\"token operator\">|</span>_ <span class=\"token number\">7</span> returned <span class=\"token number\">2</span>\n            <span class=\"token operator\">|</span>_ <span class=\"token constant\">NULL</span> returned <span class=\"token number\">0</span>\n\nNow look at <span class=\"token number\">9</span><span class=\"token operator\">-></span>right<span class=\"token operator\">:</span> has no children<span class=\"token punctuation\">,</span> so <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\nWe<span class=\"token number\">'</span>re done processing left <span class=\"token operator\">and</span> right subtrees <span class=\"token keyword\">for</span> <span class=\"token number\">9</span><span class=\"token operator\">:</span>\n<span class=\"token number\">9</span><span class=\"token operator\">-></span>left <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token number\">9</span><span class=\"token operator\">-></span>right <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n \n<span class=\"token operator\">|</span>left <span class=\"token operator\">-</span> right<span class=\"token operator\">|</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span> so we found imbalance<span class=\"token operator\">!</span> No need to process any further<span class=\"token punctuation\">,</span> we know the tree is unbalanced</code></pre></div>\n<p>Converting this to code is simple:</p>\n<ul>\n<li>If our node is null, return 0</li>\n<li>If our node has left and right child as null but is not itself null, return 1</li>\n<li>\n<p>If neither left nor right is null, call the function again on the left subtree and the right subtree</p>\n<ul>\n<li>Once you have the results from left and right subtrees, take the max of returned values, add 1 (for current level) and return</li>\n</ul>\n</li>\n</ul>\n<p>This is would translate to:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">{</span>\n    T data<span class=\"token punctuation\">;</span>\n    Node<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span> left <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n    Node<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span> right <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n   \n<span class=\"token keyword\">int</span> <span class=\"token function\">getH</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">*</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">&amp;&amp;</span> node<span class=\"token operator\">-></span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n        \n    <span class=\"token keyword\">int</span> leftHeight <span class=\"token operator\">=</span> <span class=\"token function\">RecursiveFunction</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> rightHeight <span class=\"token operator\">=</span> <span class=\"token function\">RecursiveFunction</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//Now that we have the two heights, compare and assign max + 1 to current height:</span>\n    <span class=\"token keyword\">int</span> currH <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>leftHeight<span class=\"token punctuation\">,</span>rightHeight<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">return</span> currH<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In our code, we need to keep track of whether we've encountered any unbalanced nodes. To check if we've got any unbalanced nodes, we need to compare whether the left and right heights differ by more than 1. To keep track of this, we need a global variable. As soon as it turns false, we can start unwinding our recursive call stack. </p>\n<p>An observation: we're using two pieces of related information: the height and isBalanced boolean variable. We can combine the two into one struct called <code class=\"language-cpptext\">statusAndHeight</code> and use that to keep track of the height we found and whether the node was unbalanced:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">statusAndHeight</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> status<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\nstatusAndHeight <span class=\"token function\">getH</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">&amp;&amp;</span> root<span class=\"token operator\">-></span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    \n    <span class=\"token keyword\">auto</span> left <span class=\"token operator\">=</span> <span class=\"token function\">getH</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>left<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">auto</span> right <span class=\"token operator\">=</span> <span class=\"token function\">getH</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>right<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">int</span> currH <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> isBal <span class=\"token operator\">=</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span>height <span class=\"token operator\">-</span> right<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isBal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Balance not right for node: \"</span> <span class=\"token operator\">&lt;&lt;</span> root<span class=\"token operator\">-></span>data <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>currH<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> isBal<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice, we also immediately return if left is unbalanced or right is unbalanced in our checks by returning -1 and false for our return struct. That way we don't have to unnecessarily continue processing remaining nodes. Running time of this algorithm is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span></span></span></span> is the number of nodes and since we recurse through the tree, space complexity is the call stack that we use: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>h</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(h)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">h</span><span class=\"mclose\">)</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">h</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">h</span></span></span></span> is the height of our tree. </p>\n<h3 id=\"check-if-tree-is-symmetric\"><a href=\"#check-if-tree-is-symmetric\" aria-label=\"check if tree is symmetric permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Check if tree is symmetric</h3>\n<p><strong>Write a program that checks whether a binary tree is symmetric. Symmetric tree is where a vertical line can be drawn from the root dividing the tree into mirror images (values of the nodes and positions match in each half)</strong></p>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">Is symmetric<span class=\"token operator\">:</span>\n            <span class=\"token number\">314</span>\n           <span class=\"token operator\">/</span>   \\\n          <span class=\"token number\">6</span>     <span class=\"token number\">6</span>\n         <span class=\"token operator\">/</span>       \\   \n        <span class=\"token number\">2</span>         <span class=\"token number\">2</span>\n         \\       <span class=\"token operator\">/</span>\n         <span class=\"token number\">4</span>      <span class=\"token number\">4</span>\n        <span class=\"token operator\">/</span>        \\\n       <span class=\"token number\">1</span>          <span class=\"token number\">1</span>   \n\nNot symmetric<span class=\"token operator\">:</span>\n            <span class=\"token number\">314</span>\n           <span class=\"token operator\">/</span>   \\\n          <span class=\"token number\">6</span>     <span class=\"token number\">6</span>\n         <span class=\"token operator\">/</span>       \\   \n        <span class=\"token number\">2</span>         <span class=\"token number\">5</span>\n         \\       <span class=\"token operator\">/</span>\n         <span class=\"token number\">4</span>      <span class=\"token number\">4</span>\n        <span class=\"token operator\">/</span>        \\\n       <span class=\"token number\">1</span>          <span class=\"token number\">1</span>   \n\n\nNot symmetric<span class=\"token operator\">:</span>\n            <span class=\"token number\">314</span>\n           <span class=\"token operator\">/</span>   \\\n          <span class=\"token number\">6</span>     <span class=\"token number\">6</span>\n         <span class=\"token operator\">/</span>       \\   \n        <span class=\"token number\">2</span>         <span class=\"token number\">2</span>\n         \\         \\\n         <span class=\"token number\">4</span>          <span class=\"token number\">4</span>\n        <span class=\"token operator\">/</span>          <span class=\"token operator\">/</span> \n       <span class=\"token number\">1</span>          <span class=\"token number\">1</span>        </code></pre></div>\n<p>Brute force approach is to start with root's left subtree and copy the values to an external data structure, say an array. Then iterate over the right subtree and match the values as you iterate. If there's a mismatch, it is not symmetric, otherwise the tree is symmetric. Running time is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span></span></span></span> is the number of nodes. Space is approx <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> for the array. </p>\n<p>Can we do this without saving half the tree in an array? We can try to go down each half of the tree simultaneously. One pointer goes down root's left subtree and the other goes down root's right subtree. However, the order of traversal shouldn't be the same. That is because for the tree to be symmetric, the left pointer's left child is right pointers right child. So, the order of traversal should be mirrored as well: left pointer's left child must equal right pointer's right child. Therefore left pointer can traverse in <code class=\"language-cpptext\">node left right</code> while right pointer can traverse in <code class=\"language-cpptext\">node right left</code> fashion. Let's have a look at the symmetric tree again and see the output for the left and right pointers:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\">Is symmetric<span class=\"token operator\">:</span>\n            <span class=\"token number\">314</span>\n           <span class=\"token operator\">/</span>   \\\n          <span class=\"token number\">6</span>     <span class=\"token number\">6</span>\n         <span class=\"token operator\">/</span>       \\   \n        <span class=\"token number\">2</span>         <span class=\"token number\">2</span>\n         \\       <span class=\"token operator\">/</span>\n         <span class=\"token number\">4</span>      <span class=\"token number\">4</span>\n        <span class=\"token operator\">/</span>        \\\n       <span class=\"token number\">1</span>          <span class=\"token number\">1</span>   \n\nleft<span class=\"token operator\">:</span>   <span class=\"token number\">6</span> <span class=\"token number\">2</span> null <span class=\"token number\">4</span> <span class=\"token number\">1</span> null null\nright<span class=\"token operator\">:</span>  <span class=\"token number\">6</span> <span class=\"token number\">2</span> null <span class=\"token number\">4</span> <span class=\"token number\">1</span> null null</code></pre></div>\n<p>Now, if during traversal, at any point the two pointers do not point to the same data, we can return false. If the two pointers traverse their way back up to the root, then we have a symmetric tree.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cppcpp\"><code class=\"language-cppcpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">{</span>\n    T data<span class=\"token punctuation\">;</span>\n    Node<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span> left <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n    Node<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span> right <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token function\">isSymmetric</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">*</span> left<span class=\"token punctuation\">,</span> Node<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">*</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>left <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>right<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>right<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>left <span class=\"token operator\">&amp;&amp;</span> right<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left<span class=\"token operator\">-></span>data <span class=\"token operator\">!=</span> right<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">bool</span> move1 <span class=\"token operator\">=</span> <span class=\"token function\">isSymmetric</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">-></span>left<span class=\"token punctuation\">,</span> right<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> move2 <span class=\"token operator\">=</span> <span class=\"token function\">isSymmetric</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">-></span>right<span class=\"token punctuation\">,</span> right<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>move1 <span class=\"token operator\">&amp;&amp;</span> move2<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The running time of the code is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span></span></span></span> is the number of nodes in our tree. Space complexity if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>h</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(h)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">h</span><span class=\"mclose\">)</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">h</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">h</span></span></span></span> is the height of our tree. This space complexity comes from our call stack. At most, we'd have to save <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">h</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">h</span></span></span></span> recursive calls.</p>","timeToRead":8,"excerpt":"Table of Contents Intro Problems Traversal Check if balanced Check if tree is symmetric Intro A binary tree is a data structure that is…","frontmatter":{"title":"Binary Tree Problems","date":"2020-05-10T00:00:00.000Z","categories":["Problems"],"extract":"Binary tree problems","thumbnail":"/post-images/tree.png","tags":["Binary Tree Problems"]},"fields":{"slug":"/binary-tree-problems","date":"May 10, 2020"}}},"pageContext":{"slug":"/binary-tree-problems","nexttitle":"Stack Problems","nextslug":"/stack-problems","prevtitle":"C++ Standard input","prevslug":"/c-standard-input"}}}