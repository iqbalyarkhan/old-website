{"componentChunkName":"component---src-templates-post-js","path":"/binary-search-trees","result":{"data":{"markdownRemark":{"html":"<h3 id=\"introduction\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h3>\n<p>In this post I'll talk about a data structure called Binary Search Tree. This post is related to my <a href=\"/binary-search\">binary search</a> post where we discussed the binary search algorithm. BSTs use a similar idea but allow us to store our data efficiently so that we don't have to iterate over an entire array to find the correct position of the element we're looking to insert. We'll look at this in more detail as we go over the code.</p>\n<h3 id=\"code\"><a href=\"#code\" aria-label=\"code permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h3>\n<p>I've got two separate classes: one to represent our binary search tree and I've named this class BST. The other is to represent a node in our tree and I've called this class Node. Both are generic classes.</p>\n<p>Node Class:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> Node_h</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> Node_h</span>\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">{</span>\n    Node<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\n    T element<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span> </span><span class=\"token comment\">/* Node_h */</span></code></pre></div>","timeToRead":1,"excerpt":"Introduction In this post I'll talk about a data structure called Binary Search Tree. This post is related to my binary search post where weâ€¦","frontmatter":{"title":"Binary Search Trees","date":"2019-11-11T00:00:00.000Z","categories":["Data Structures"],"extract":"An analysis of binary search trees in C++","tags":["Data Structures","Binary Search Trees"]},"fields":{"slug":"/binary-search-trees","date":"November 11, 2019"}}},"pageContext":{"slug":"/binary-search-trees","nexttitle":"Selection Sort","nextslug":"/selection-sort","prevtitle":"Priority Queues","prevslug":"/priority-queues"}}}