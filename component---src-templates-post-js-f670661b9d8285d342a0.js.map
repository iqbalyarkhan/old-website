{"version":3,"file":"component---src-templates-post-js-f670661b9d8285d342a0.js","mappings":"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","sources":["webpack://iqbal-khan-blog/./node_modules/url-join/lib/url-join.js","webpack://iqbal-khan-blog/./src/components/SEO.js","webpack://iqbal-khan-blog/./src/components/PostTags.js","webpack://iqbal-khan-blog/./src/components/PostTags.module.scss","webpack://iqbal-khan-blog/./src/templates/post.module.scss","webpack://iqbal-khan-blog/./src/templates/post.js"],"sourcesContent":["(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();else if (typeof define === 'function' && define.amd) define(definition);else context[name] = definition();\n})('urljoin', this, function () {\n  function normalize(strArray) {\n    var resultArray = [];\n\n    if (strArray.length === 0) {\n      return '';\n    }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    } // If the first part is a plain protocol, we combine it with the next part.\n\n\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    } // There must be two or three slashes in the file protocol, two slashes in anything else.\n\n\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') {\n        continue;\n      }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n    }\n\n    var str = resultArray.join('/'); // Each input component is now separated by a single slash except the possible first plain protocol part.\n    // remove trailing slash before parameters or hash\n\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1'); // replace ? in parameters with &\n\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n});","import React from 'react'\nimport Helmet from 'react-helmet'\nimport urljoin from 'url-join'\nimport config from '../../data/SiteConfig'\n\nconst SEO = ({ postNode, postPath, postSEO }) => {\n  let title;\n  let description;\n  let image;\n  let postURL;\n  if (postSEO) {\n    const postMeta = postNode.frontmatter;\n    ({ title } = postMeta);\n    description = postMeta.description\n      ? postMeta.description\n      : postNode.excerpt;\n    // image = postMeta.cover;\n    postURL = urljoin(config.siteUrl, config.pathPrefix, postPath);\n  } else {\n    title = config.siteTitle;\n    description = config.siteDescription;\n    image = config.siteLogo;\n  }\n\n  // image = urljoin(config.siteUrl, config.pathPrefix, image);\n  const blogURL = urljoin(config.siteUrl, config.pathPrefix);\n  const schemaOrgJSONLD = [\n    {\n      \"@context\": \"http://schema.org\",\n      \"@type\": \"WebSite\",\n      url: blogURL,\n      name: title,\n      alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\"\n    }\n  ];\n  if (postSEO) {\n    schemaOrgJSONLD.push(\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"BreadcrumbList\",\n        itemListElement: [\n          {\n            \"@type\": \"ListItem\",\n            position: 1,\n            item: {\n              \"@id\": postURL,\n              name: title,\n              image\n            }\n          }\n        ]\n      },\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"BlogPosting\",\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\n        headline: title,\n        image: {\n          \"@type\": \"ImageObject\",\n          url: image\n        },\n        description\n      }\n    );\n  }\n  return (\n    <Helmet>\n      {/* General tags */}\n      <meta name=\"description\" content={description} />\n      <meta name=\"image\" content={image} />\n\n      {/* Schema.org tags */}\n      <script type=\"application/ld+json\">\n        {JSON.stringify(schemaOrgJSONLD)}\n      </script>\n\n      {/* OpenGraph tags */}\n      <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n      {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:image\" content={image} />\n      <meta\n        property=\"fb:app_id\"\n        content={config.siteFBAppID ? config.siteFBAppID : \"\"}\n      />\n\n      {/* Twitter Card tags */}\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta\n        name=\"twitter:creator\"\n        content={config.userTwitter ? config.userTwitter : \"\"}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={description} />\n      <meta name=\"twitter:image\" content={image} />\n    </Helmet>\n  )\n}\n\nexport default SEO\n","import React from 'react'\nimport _ from 'lodash'\nimport { Link } from 'gatsby'\nimport * as styles from './PostTags.module.scss'\n\n\nconst PostTags = ({ tags }) => {\n  return (\n    <div className={styles.tagContainer}>\n      {tags &&\n        tags.map(tag => (\n          <Link\n            key={tag}\n            to={`/tags/${_.kebabCase(tag)}`}\n          >\n            <span>{tag}</span>\n          </Link>\n        ))}\n    </div>\n  )\n}\n\nexport default PostTags\n","// extracted by mini-css-extract-plugin\nexport var tagContainer = \"PostTags-module--tag-container--YPLV+\";","// extracted by mini-css-extract-plugin\nexport var postMeta = \"post-module--post-meta--b8vC1\";\nexport var pagination = \"post-module--pagination--Y3rfk\";","import React from 'react'\nimport Helmet from 'react-helmet'\nimport { graphql , Link } from 'gatsby'\nimport Layout from '../layout'\nimport PostTags from '../components/PostTags'\nimport SEO from '../components/SEO'\nimport config from '../../data/SiteConfig'\nimport * as styles from  './post.module.scss'\nimport \"./prism-okaidia.css\";\n\nexport default  ({ data, pageContext }) => {\n  const { slug , nexttitle , nextslug , prevtitle , prevslug } = pageContext;\n  const postNode = data.markdownRemark;\n  const post = postNode.frontmatter;\n  const date = postNode.fields.date;\n  if (!post.id) {\n    post.id = slug;\n  }\n  return (\n    <Layout>\n      <main>\n        <Helmet>\n          <title>{`${post.title} | ${config.siteTitle}`}</title>\n        </Helmet>\n        <SEO postPath={slug} postNode={postNode} postSEO />\n        <div>\n          <h1>{post.title}</h1>\n          <h3>{post.extract}</h3>\n          <p className={styles.postMeta}>{date} </p>\n          <div dangerouslySetInnerHTML={{ __html: postNode.html }} />\n          <div className={styles.postMeta}>\n            <PostTags tags={post.tags} />\n          </div>\n          <hr />\n        </div>\n        <nav>\n          <ul className={styles.pagination}>\n            <li>\n              <Link to={prevslug} rel=\"prev\">\n                ← {prevtitle}\n              </Link>\n            </li>\n            <li>\n              <Link to={nextslug} rel=\"next\">\n                {nexttitle} →\n              </Link>\n            </li>\n          </ul>\n        </nav>\n      </main>\n    </Layout>\n  )\n}\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      timeToRead\n      excerpt\n      frontmatter {\n        title\n        date\n        categories\n        extract\n        thumbnail\n        tags\n      }\n      fields {\n        slug\n        date(formatString: \"MMMM DD, YYYY\")\n      }\n    }\n  }\n`;\n"],"names":["normalize","strArray","resultArray","length","TypeError","match","first","shift","replace","i","component","push","str","join","parts","split","arguments","slice","call","module","exports","definition","title","description","image","postURL","postNode","postPath","postSEO","postMeta","frontmatter","excerpt","urljoin","config","blogURL","schemaOrgJSONLD","url","name","alternateName","itemListElement","position","item","headline","content","type","JSON","stringify","property","tags","className","map","tag","Link","key","to","data","pageContext","slug","nexttitle","nextslug","prevtitle","prevslug","markdownRemark","post","date","fields","id","Helmet","SEO","extract","styles","dangerouslySetInnerHTML","__html","html","rel"],"sourceRoot":""}